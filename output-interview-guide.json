{
  "team_id": "aline123",
  "items": [
    {
      "title": "Interview Guide: The Amazon Leadership Principles Interview Guide for Software EngineersThe defin",
      "content": "We helped write the sequel to \"Cracking the Coding Interview\". [Read 9 chapters for free →](https://bctci.co/free-chapters)\n\n[\n\ninterviewing.io\n\n\n\n](/)\n\nOpen menu\n\nInterview resources\n\n*   [For employers](https://interviewing.io/employers)\n*   [Gift mock interviews](https://interviewing.io/gift-practice-interviews)\n*   [Blog](https://interviewing.io/blog)\n*   [FAQ](https://interviewing.io/faq)\n*   [Log in](https://start.interviewing.io/login)\n[Give it a try](https://interviewing.io/signup)\n\n# A Senior Engineer's Guide to the Amazon Leadership Principles Interview\n\n## How to approach an Amazon Leadership Principles interview\n\n#### Table of Contents\n\n[Creating the Amazon Leadership Principles guide](#guide_creating)\n\n[How to use the Amazon Leadership Principles guide](#guide_using)\n\n#### [Part 1: Amazon Leadership Principles Explained](#part_1)\n\n[What are Amazon’s Leadership Principles (LPs)?](#lp_what_are_the_lps)\n\n[How to approach the Amazon Leadership Principles interview](#lp_theory_reframing)\n\n[High-level strategy to frame your Leadership Principles interview](#lp_theory_strategy)\n\n#### [Part 2: What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview](#part_2)\n\n[What to expect](#lp_interview_what_to_expect)\n\n[What to avoid](#lp_interview_what_to_avoid)\n\n[What to do](#lp_interview_what_to_do)\n\n[How to practice for Leadership Principles](#lp_interview_how_to_practice)\n\n#### [Amazon Leadership Principles interview question examples](#lp_interview_question_examples)\n\n1.  [Learning Center](/learn)\n2.  [Guides](/learn#interview-guides)\n    \n3.  Amazon Leadership Principles\n    \n\n## Creating the Amazon Leadership Principles guide\n\nWe created this guide after speaking with our community of interviewers, which includes over 100 current and former Amazon engineers, as well as our corpus of mock interviews, which includes close to 500 Amazon Leadership Principles interviews. Our community and our data puts us in a unique position to share Amazon Leadership Principles advice, tips and tricks. If you’re studying for an upcoming Amazon Leadership Principles interview, use our expertise. It’ll give you a serious edge.\n\n## About interviewing.io\n\ninterviewing.io is a mock interview practice platform. In our lifetime, we've hosted close to 100K mock interviews, conducted primarily by senior engineers from FAANG.  \n  \nWe have the recordings from these mock interviews, as well as post-interview feedback and outcomes, which lets us perform some cool and useful analysis!  \n  \nBest of all, interviewing.io lets you book anonymous mock interviews with senior engineers from companies like Amazon, Apple, Facebook, Google, and many more.\n\n[Book yours today](https://interviewing.io/signup)\n\nYouTube: Watch “How interviewing.io Helps Engineers Land Jobs”\n\nThough most of the interviews we've hosted have focused on algorithms/data structures or systems design, we've recently started offering other types of practice as well, including Amazon-specific behavioral interviews. We've hosted close to 500 Amazon behavioral interviews to date.\n\n## How to use the Amazon Leadership Principles guide\n\nWe intentionally structured this guide as two separate parts. [Part 1](#part_1) introduces Amazon's Leadership Principles, discusses high-level strategies, and gives you a high-level view of our approach to the Amazon Leadership Principles. [Part 2](#part_2) will teach you exactly how to answer Amazon Leadership Principles questions, and we'll provide you with a detailed plan so you'll know exactly what to do to excel in your interview. Where you start reading depends on what you want. If you're interviewing at Amazon tomorrow, don't panic—just jump to [Part 2: What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview](#part_2). Otherwise, begin with Part 1 to gain the foundational knowledge that will help you practice most effectively.\n\nWith that being said, our insight does have some limitations. It's worth noting, for example, that the majority of job interviews we looked at for this project were with L6/SDE III candidates, so our data set is skewed toward senior engineers. (For reference, an L6/SDE III at Amazon is roughly equivalent to an L5/Sr. SWE at Google.)\n\nPART 1:\n\n## Amazon Leadership Principles Explained\n\nBefore we dive into specific interview questions, it’s important to understand what the Amazon Leadership Principles are and what they mean for Amazon employees and team members.\n\n## What Amazon Likes\n\n*   Direct challenges\n*   Showing customer obsession (all the time)\n*   Big losses\n*   No answer (more so than a bad answer)\n*   Stories that go in a perfect full circle\n\nVS\n\n## What Amazon Dislikes\n\n*   Conflict rabbit holes\n*   Not enough impact and metrics\n*   Not enough focus on individual contribution\n*   Saying LPs out loud\n*   Misunderstanding \"Have Backbone; Disagree and Commit\"\n\n## What are Amazon’s Leadership Principles (LPs)?\n\n## In a nutshell, Leadership Principles (LPs) are the 16 values Amazon cares the most about.\n\n![Amazon's leadership principles](/static/images/AmazonLPS.svg)\n\nBelow we list the 16 Leadership Principles developed by Jeff Bezos and give a brief overview of each. We’ll also tell you how that value impacts the work environment and share some Leadership Principles questions which could probe for each LP. You’ll notice some of the questions seem irrelevant to the LP they’re listed under; that’s because some Amazonians intentionally design tricky questions. Don’t use these as a way to guess which LP a question is aimed at. For now, use them to start building a model in your head of what these interviews actually look like.\n\n### 1\\. Customer Obsession\n\nCustomer obsession is about giving the customer what they want before they know they want it. It’s a business-driver; engineers who are obsessed with delighting customers will churn out new features faster. Since Amazonians are encouraged to find ways to delight the customer before they know they’d like to be delighted, this promotes repeat business, effectiveness, and innovation.\n\nExample “Customer Obsession” questions:\n\n*   _Tell me about a time when you strongly disagreed with your manager or peer on something you considered very important to the business._\n*   _To try to meet the high expectations of our customers, we sometimes promise more than we can deliver. Tell me about a time when you overcommitted yourself or your company._\n\n### 2\\. Invent and Simplify\n\nAmazon rewards risk-taking. They push the bounds of what’s possible from cloud to e-commerce. They want big ideaters with business savvy; engineers at Amazon are encouraged to innovate as well as cut costs. As big as they grow, they still keep it simple: AWS is the biggest cloud provider in the world, yet Amazon.com strives to be their number one client. That’s an example of a simple solution to a complex problem, which is what this Leadership principle is all about.\n\nExample “Invent and Simplify” questions:\n\n*   _Tell me about a time when you didn’t meet customer’s needs._\n*   _Give me an example of a complex problem you solved with a simple solution._\n\n### 3\\. Learn and Be Curious\n\nVirtually every tech company’s marketing about their culture will include something like this. Curiosity drives learning. Amazon wants smart people who are never satisfied; they want you to always be learning. They promote taking big swings even if you end up missing. You can’t learn from your mistakes without curiosity.\n\nExample “Learn and Be Curious” questions:\n\n*   _Give me an example of a mission or goal you didn’t think was achievable. We all have things about ourselves we'd like to improve on at work. Give me an example of something that you've worked on to improve your overall work effectiveness._\n\n### 4\\. Insist on the Highest Standards\n\nOver the years, Jeff Bezos has repeated the mantra “Every day is day one.” He wants employees who approach every day as if they haven’t accomplished anything yet. That is a very high standard. Another reflection of Amazon’s high standards is how challenging and rewarding it is to become one of their most trusted interviewers, which is called a “Bar Raiser”. A good portion of those who apply don’t make the cut and if you make it your promotion packet gets a big boost. A Bar Raiser can veto the votes of all other interviewers in an onsite round. Those are high standards.\n\nExample “Insist on the Highest Standards” questions:\n\n*   _Tell me about a time when you had to work with a difficult customer or user._\n*   _Tell me about a time when you used external trends to improve your own company's products or services._\n\n### 5\\. Deliver Results\n\nAmazon aims for market domination. This is a company which values the “what” over the “why” and the “how”; they don’t care about how you get there or why you get there as much as they care about you getting there. You get there. In their interviews, they expect candidates to move quickly and without any hints, and they have coding questions on the easier side because they want to get to the optimal outcome as soon as possible.\n\nExample “Deliver Results” questions:\n\n*   _Could you tell me about a time where you were working on a project where you were working with another person. Over time, that person lessened their involvement in the project and you had to take on more responsibility._\n*   _Tell me about a strategic decision you had to make without clear data or benchmarks._\n\n### 6\\. Strive to be the Earth’s Best Employer\n\nIf you’re a software engineer, you won’t get asked about this.\n\n### 7\\. Dive Deep\n\nLike most tech companies, Amazon wants decisions to be made based on data; to implement an idea, you’ll need to show data. Where Amazon is different is this gritty mentality of “get the fricking job done”. Diving deep is essentially pulling yourself up by the bootstraps and making it happen. It’s also about developing a cultural attitude of people who are willing to get their hands dirty in order to win.\n\nExample “Dive Deep” questions:\n\n*   _Tell me about a time when you had to communicate a change in direction that you anticipated people would have concerns with._\n*   _Tell me about a time where you were thrown into a project where you had no experience in._\n\n### 8\\. Have Backbone; Disagree and Commit\n\nThis is the most misunderstood Leadership Principle. What it doesn’t mean is “I’ll stand up for myself. Then do it my way regardless of what you say.” What it actually means is “I verbalize the things I disagree on. Then I commit to taking action. Whether it was the action you or I proposed doesn’t matter: I’ll commit to following through on something.” This is also probably the most infamous LP, and it seems to be part of the reason for Amazonian interviewers' higher than normal level of intensity.\n\nExample “Have Backbone; Disagree and Commit” questions:\n\n*   _Often, we must make decisions as a group. Give me an example of a time you committed to a group decision even though you disagreed._\n*   _Tell me about a time where you disagreed with a coworker or PM or manager because you believed the decision they wanted to make was wrong for the customer._\n\n### 9\\. Success and Scale Bring Broad Responsibility\n\nUsually only eng managers get asked about this one, so we’ll skip it.\n\n### 10\\. Ownership\n\nTake accountability. Do all of, if not more than, what the job requires. The intention is to stimulate taking risks, having pride, and sacrificing for the business. Amazon wants folks who take big bets, hold themself to high expectations, and put in the hard work. This is one of the reasons they place a higher value on focusing on their individual contribution when answering Leadership Principles questions.\n\nExample “Ownership” questions:\n\n*   _Describe a time when you took on work outside of your comfort area._\n*   _Describe a situation where you made an important business decision without consulting your manager._\n\n### 11\\. Are Right, A Lot\n\nThis is another value that adds to the energy of a Leadership Principles interview: this is about competition. You have to know your stuff if you’re right, a lot. You also have to be willing to assert your point and back it up with all that data you dove deep for. This LP doesn’t mean Amazonians can’t mess up. They openly encourage candidates to describe times they were wrong, especially when they were wrong on a big gamble. Their ethical decision tree would look something like: Step 1: Dominate. Step 2: Did you dominate? If yes, proceed to success. If not, you better have risked enough to learn if and how domination is possible.\n\nExample “Are Right, A Lot” questions:\n\n*   _Tell me about a time when you did not effectively manage your projects and something did not get completed on time._\n*   _Tell me about a time you wouldn’t compromise on achieving a great outcome when others felt something was good enough._\n\n### 12\\. Hire and Develop the Best\n\nDomination requires finding great players and weeding out the subpar players. They’re the only FAANG company that has a formal title for their “best” interviewers: Bar Raisers. Not only does Amazon compete against other tech companies to find the “best” talent but [they also compete with themselves](https://interviewing.io/guides/hiring-process/amazon#amazon). You can interview with multiple teams simultaneously; it’s a dog-eat-dog world at Amazon and that includes dogs in the same pack.\n\nExample “Hire and Develop the Best” questions:\n\n*   _Tell me about a time when you received negative feedback._\n*   _Describe a time when you improved morale and productivity on your team._\n\n### 13\\. Think Big\n\nAmazon has a proven track record with huge ambition, large bets, and rapid expansion to new markets. Going to the moon, for one. Knowing your destination is one thing. It’s another level for your destination to be in the clouds (not an AWS joke, we swear). It’s about having a grand vision of the future so they can achieve those high standards.\n\nExample “Think Big” questions:\n\n*   _Give an example of a creative idea you had that proved really difficult to implement._\n*   _Tell me about a time when you encouraged a team member or organization to take a big risk._\n\n### 14\\. Bias for Action\n\nYou can’t take over the world if you don’t act. You might have the best idea to refactor the codebase in your head, but if it never moves towards implementation, it’s worthless. A straightforward way to make employees more productive is to openly encourage them to produce. Amazon’s bias against inaction affects their interview style: they’re looking for candidates who move fast without hints, who seek market domination, and who deliver results.\n\nExample “Bias for Action” questions:\n\n*   _Give me an example of a calculated risk that you have taken where speed was critical._\n*   _Tell me about a time where you were the first one to take action on something._\n\n### 15\\. Frugality\n\nAmazon is one of the rare companies who openly flaunts being frugal. Since when is “cutting costs” sexy? When it’s said by a group of the terminators who want to dominate the world, that’s when. Amazon wants you to not only figure out how to go to the moon, they want you to cut costs while you do it. One way to impress Amazon in the interview is to talk about the decisions you made in the past which saved the company money. You can learn how to do that in a later section of this guide called “[How to practice for Leadership Principles](https://interviewing.io/guides/amazon-leadership-principles#lp_interview_how_to_practice).”\n\nExample “Frugality” questions:\n\n*   _Tell me about a time you pushed back on a deadline._\n*   _Give me an example of how you have helped save costs or eliminate waste within your role or organization._\n\n### 16\\. Earn Trust\n\nThis is one of the rare Leadership Principles which is not about competition. It’s about cooperation. If you want to demonstrate cooperation, focus on how you understood the other person’s perspective. A difference of opinion is natural and healthy. This LP is about showing you know how to repair: either reactively after or proactively before a difference of opinion.\n\nExample “Earn Trust” questions:\n\n*   _Tell me about a time when you had a disagreement with a colleague or manager._\n*   _Describe a time when you needed to influence a peer who had a differing opinion about a shared goal._\n\nYou can read more about how Amazon defines these LPs [here](https://www.amazon.jobs/content/en/our-workplace/leadership-principles).\n\n[Amazon's interview process](https://interviewing.io/guides/hiring-process/amazon#amazon) involves a) behavioral interview rounds and b) technical interview rounds with a few behavioral questions thrown in. The behavioral questions will all focus on your work history. Importantly, Amazon will decide whether or not to hire you and how much responsibility to give you based partly on how well you demonstrate their Leadership Principles when you discuss your work history.  \n  \nWhat Amazon assesses is consistent between interviewers. Each interviewer will be assigned 1-3 LPs to look for when interviewing you. They're searching for signals on whether you: meet the bar, raise the bar, or are below the bar (for their assigned LPs).  \n  \nBut how Amazon conducts the behavioral round varies widely. Our research has shown that if you were to observe sessions of 10 different LP interviewers, you would discover that each interviewer has their own way of determining a candidate's fit. One interviewer might ask more questions on fewer topics, while another interviewer may do the opposite. Complicating matters, upon observing the same behavior, different interviewers will likely perceive different signals. Notably, there is no consensus on what makes a good answer good.\n\n> \"There is no clear rubric for what type of answer ‘meets or raises the bar.' The evaluation is subjective, and it relies on the interviewer's interpretation of the problem and solution.\"interviewing.io interviewer from Amazon\n\nAlthough you might find this degree of uncertainty intimidating, we'll show you how you can actually use this uncertainty to your advantage and score additional points during your interview.\n\n## How to approach the Amazon Leadership Principles interview\n\nMany candidates treat their interview like a standardized test. But doing so is a serious and costly mistake.  \n  \nA standardized test is unimpressionable, fixed, and objective. Information only flows one way, any modification of structure or content is rejected, and correct answers aren't debatable. But, as we showed above, the individualized approach of Amazon's interviewers makes it clear: Amazon's behavioral round is not a standardized test—it's a game.  \n  \nA game is malleable, dynamic, and subjective. In other words, the behavioral interview is a lot like [Calvinball](https://calvinandhobbes.fandom.com/wiki/Calvinball). In Calvinball, “While the objective of the game is to win, there is no real way to determine what winning is” ([source](https://www.varsitytutors.com/scholarship_entries/christopher-29302#:~:text=The%20only%20things%20required%20are,to%20determine%20what%20winning%20is.)). That means that you can change the rules. You can mold the field of play to fit your strengths. You're limited solely by your imagination.  \n  \nThese types of games are influenced by cognitive biases, configurable to your advantage, and filled with judgment calls. But, more than anything else, the biggest difference between a standardized test and a game is that the latter involves your counterpart (the interviewer) making up the rules as they go along—just like you.\n\n> \"25% of SDEs who pass the technical bar are disqualified due to behavioral concerns.\"interviewing.io interviewer from Amazon\n\n### Why interview preparation matters\n\nMany engineers wrongly assume that they don't need to prepare for a behavioral interview. They believe they can wing it by simply talking about their past experience because they assume it's something they're already intimately familiar with. However, winging it won't cut it in Amazon's behavioral interview—it's a particularly common failure pattern we see on our platform.  \n  \nAmazon is known for its competitive workplace culture, and most Amazonians seem to get satisfaction from making a behavioral round intense, much more so than most interviewers at other companies. Unprepared candidates are prone to get rattled by the somewhat confrontational, challenging style of these interviewers, causing their performance to suffer as a result.  \n  \nTo avoid that same fate and actually excel in the interview, you'll need to learn about what Amazon cares about (the LPs) and discover how to respond to their tricky questions without getting flustered. Do that, and you'll increase your odds of both getting hired and receiving a higher level of responsibility.\n\n> \"I wish more candidates would prepare well in advance for our behavioral questions. I wish they knew the questions' patterns and were prepared to speak about their experience in an effective way.\"interviewing.io interviewer from Amazon\n\n## High-level strategy to frame your Leadership Principles interview\n\nIn this section, we'll teach you a strategy that will increase your odds of success while lowering your stress. We think it's important to explain why you should use this strategy and how we analyzed and bucketed these LPs to maximize your hit rate.\n\n### The most common pitfall to avoid\n\nWhen it comes to preparing for Amazon's interview, one popular strategy is to guess which LP a question is asking about before answering the question. Unfortunately, there are 16 different LPs to keep track of, so your odds of guessing correctly are low; your interviewer may ask tricky, confusing, or challenging questions that are designed to push back, probe, or catch you off guard; and you can't predict if the interviewer will even detect signal of the LP you're trying to convey.  \n  \nThere has to be a simpler way to crack this, and we think we've found it.\n\n### Put Customer Obsession above all else\n\nIf we can determine what concepts these LPs have in common, then you can simply show signal for a bucket of LPs instead of attempting to laser focus your answer on one LP. This will make it easier for you to prepare for the interview and also increase your odds of success.  \n  \nWe spent a lot of time analyzing the 16 LPs, identifying their shared themes, and placing them into buckets. Searching for the most efficient and effective way to group the LPs, we discovered that every LP has one common denominator: customer obsession. This is Amazon's favorite value. It's their north star. Without customer obsession, Amazon wouldn't be Amazon.  \n  \nBut if all 16 LPs can be reduced down to one concept, then what's the point of following the status quo and guessing which LP a question is asking about? Because, technically, wouldn't the answer be customer obsession every time?  \n  \nYes, and that's our point. Though it may be tempting to do otherwise, you should ignore the urge to guess which specific LP lies beneath a question. It's more likely to hurt than it is to help.  \n  \nInstead, broadcast the idea that you are obsessed with delighting customers. Signal this idea early and often; make this your new default system. In such a generalized interview format with so much subjectivity, you want to cover as wide of a surface area as possible. Demonstrating customer obsession is the closest thing we've found to a cheat code.\n\nPART 2:\n\n## What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview\n\nNow that we've explained why you should condense the LPs into a single bucket (customer obsession), it's time to learn everything you need to know in order to craft your own ideal answers.\n\n## What to expect when answering questions about Amazon Leadership Principles\n\nExpect your interviewer or hiring manager to directly challenge your answers. Here's an excerpt from a tech lead interview at Amazon. Let's take a look at how it flows.\n\nEXAMPLE QUESTION:\n\n\"How do you make sure you're focused on the right deliverables when you have several competing priorities?\"\n\n1ST FOLLOW-UP QUESTION:\n\n\"Can you tell me about a time when you did not manage priorities and something fell through the cracks?\"\n\n2ND FOLLOW-UP QUESTION:\n\n\"What could you have done better?\"\n\n3RD FOLLOW-UP QUESTION:\n\n\"I don't think you answered the question. I think you're answering a more generic question. I'm asking you to tell me about a time when your process for competing priorities didn't work.\"\n\nThe topic of the initial Question is ambiguous: there's no known optimal solution for managing priorities. The 1st Follow-up Question is about failure. Essentially, so far, the interviewer has said, “Hey, give me your philosophy on a subject for which there's no consensus,” followed by, “Okay, now tell me how that philosophy of yours is imperfect.” That's a direct challenge.  \n  \nThe 2nd Follow-up Question is also about failure. And the 3rd Follow-up Question is another direct challenge. In fact, you might never see a stronger direct challenge than the 3rd Follow-up Question.  \n  \nThis is classic Amazon. Ambiguity and failure can be intimidating enough on their own, but Amazon doesn't stop there. They turn up the heat to test your ability to handle pressure.  \n  \n\n## Four common mistakes to avoid when answering Amazon interview questions\n\nIn addition to learning what to expect in an interview, it's important to identify common mistakes that candidates make so you can avoid them in your own interview. Here, we will focus on the mistakes themselves.\n\n## Most Common Mistakes in Terms of Content\n\n![The most common mistakes that Amazon interviewees make in terms of content](/static/images/CommonMistakes.svg)\n\nIn addition to learning what to expect in an interview, it's important to identify common mistakes that candidates make so you can avoid them in your own interview. Here, we will focus on the mistakes themselves.\n\nMISTAKE #1\n\n### Not enough impact or metrics\n\nThe most common critical feedback given by interviewers is either: “It would have been better if you described more impact” or “It would have been better if you mentioned more metrics.”  \n  \nAmazon likes business and scale. An answer without impact means Amazon can't get a read on your business acumen. An answer without metrics gives Amazon no way to determine scale.  \n  \nOne reason candidates don't mention impact or metrics is because they think they can only use impact or metrics that are accurate with 100% certainty. Lastly, one additional reason people fail to include impact or metrics is that they simply aren't sure how to find them. (If you want to learn how to find impact and metrics right now, then jump to Step 1 of [How to Practice for LP](#lp_interview_how_to_practice).)  \n  \n\nMISTAKE #2\n\n### Falling down rabbit holes when asked about conflict\n\nCandidates frequently get tripped up when asked questions about conflict. We can't tell you how to avoid every possible pitfall, but we can tell you how to avoid the most common one: Trying to prove that you were right.  \n  \nTwo things that interviewers absolutely do not want to hear when you're speaking about conflict:\n\nWhy your X approach was better than your colleague's Y approach.\n\nThe minute details of your X approach and of your colleague's Y approach.\n\nThis is where many people get stuck. It doesn't matter who had the better technical approach. Don't try to justify to the interviewer that you were right and your colleague was wrong. Avoid this trap.\n\nYou may have spent a lot of time thinking about this, but that doesn't mean you need to share a lot about it. Once again, your goal is not to prove that you were correct. Therefore, you shouldn't speak at length about why a proxy server was the best solution or explain the usability drawbacks of changing the hosting environment. Less is more in this case. If they want more detail, they'll ask about it in their follow-up questions.Some of the other common ways people fail during questions about conflict: rambling for five minutes before describing the actual conflict, talking about a conflict from 10 years ago, focusing on the intensity of the conflict instead of what happened during the conflict, and speaking about a conflict where the topic seems trivial for someone at their level.\n\nMISTAKE #3\n\n### Not focusing on individual contribution\n\n> \"When talking about your projects, most of your words should be about ‘I' not ‘We.' Your answer should mainly be about your individual contribution.\"interviewing.io interviewer from Amazon\n\nAccording to our research, the third most common reason engineers fail interviews is a lack of focus on their individual contributions when discussing their work history. Typical feedback from interviewers looked like this: “I got an understanding of what the project was about and what work was involved in general, but I couldn't really get a sense of what you did.”  \n  \nAgain, Amazonian and non-Amazonian interviewers both deduct points when a candidate fails to focus on their individual contribution. But some speculate that Amazonians dock more points than other companies when someone misses the mark here. Don't get caught up in an in-depth walk-through of how the technology works, the specific structure of the business units, or the intricacies of what everybody else was doing. Say “I”!\n\nMISTAKE #4\n\n### Saying Leadership Principles out loud\n\nIf you're the candidate, don't recite LPs out loud. It sounds clunky and unnatural.\n\n## Not Ok\n\n*   Saying “customer obsession”\n*   Saying “deliver results”\n\nVS\n\n## Ok\n\n*   Saying “delighting users is important”\n*   Saying “get stuff done”\n\nTakeaway: you can riff, but don't “copy and paste.”\n\nWe've focused so far on the most common reasons candidates lose points in an Amazon behavioral interview, but now let's take a look at strategies you can use to make a positive impact.\n\n## Tips for a successful Amazon behavioral interview\n\nNow that you know what to avoid during your interview, let&s dive into some best practices and tips for passing your behavioral interview with flying colors.\n\n### Beat the drum with customer obsession—the most important Leadership Principle\n\nAs we mentioned earlier, all of the LPs have one common denominator: customer obsession. It's never a bad time to demonstrate a keen focus on meeting customers' needs; to borrow a quote from Wedding Crashers: “It's like pizza, baby—it's good no matter what!  \n  \nTo make your answers stronger, you can show signal for customer obsession in places where it doesn't seem to apply. Take this question, for example: “Tell me about a time you had a disagreement with a colleague or a manager. What was the situation? How did you resolve it?”\n\n## ANSWER AWithout customer obsession framing\n\n*   I had to organize and refactor the codebase. And I thought object-oriented programming was the best approach. But one of my teammates did not buy in. I tried to explain the benefits but did not sway him. I wanted to get the work done, so I ended up going ahead with the approach he proposed. At the end of the day, delivering the feature was more important than proving my point to stick with the object-oriented approach. I made peace with my teammate and went ahead with his approach.\n\nVS\n\n## ANSWER AWith customer obsession framing\n\n*   I had to reorganize the codebase and refactor the codebase. And I thought object-oriented programming was the best approach. But my teammate didn't buy in. For the sake of pushing something to prod quicker, we ended up going with his approach. But looking back on it, I wish I would have fought more for the object-oriented approach, and the reason is because user experience is really important to me. If we had the codebase nicely structured with object-oriented design and patterns and hierarchy, it'd make it way easier to maintain and more robust and less buggy. So later on we could develop cool new features for customers and push them out quicker.\n\nData collected from a representative sample of Amazon behavioral interviews showed us what to do and what to avoid during an interview.\n\n### No answer is often better than a bad answer\n\nIt's all right to say: “I don't have an answer for that,” or “I can't think of an example for this question.” In fact, interviewers don't expect you to have an answer for every single question they ask. Unless it's a question your interviewer thinks is insanely common, you're not going to lose points for passing on one question. Obviously, you don't want to dodge four behavioral interview questions in a row. But, overall, no answer is better than a bad answer.\n\n> \"It's better to share no example than a bar-lowering example. For instance, if the interviewer asks you to share a time you ‘Insisted on the Highest Standards,' and you talk about code formatting one source file, that is almost definitely a negative mark against you. It would be better to share nothing at all.\"interviewing.io interviewer from Amazon\n\n### The most misunderstood Amazon leadership principle\n\nHave backbone; disagree and commit is not about making people do it your way. This is the most misunderstood LP. It's easy to over-focus on the competitive traits Amazon likes; determined to show they're a good fit for Amazon, candidates seem to spin their past work history to make it seem like they're ultra-competitive.  \n  \nIf it's impossible to do it your way, are you able to go ahead with someone else's plan? Or do you block? If it's impossible to do it your way, accommodating a conflicting idea after you've clearly asserted your point is perfectly reasonable. To showcase this in an interview, you might describe how you told your colleague:\n\n> \"Hey, I don't agree. And I don't agree for these reasons. I think it's not going to work. However, for the sake of getting the work done, I'm on board. And down the road, if things aren't going as planned, then we can circle back and revisit this discussion.\"\n\n### Follow four rules when speaking about conflict\n\nWhen answering questions about conflict, do your best to clearly describe the conflict you're referencing, ensure the conflict is pertinent to the level of the job you're applying for, choose a conflict that resulted in significant discussion or back and forth, and stick to the facts.RULE #1\n\n#### Clearly articulate the conflict in the first few seconds of your answer.\n\nDon't make your interviewer wait. After you share the conflict, pause briefly to let it sink in.\n\n> EXAMPLE:\"In my current role, a conflict occurred over choosing how to integrate a third-party software. The conflict was: my manager and I couldn't agree on an approach.\"\n\nRULE #2\n\n#### Make sure the topic of a conflict is relevant to your level.\n\nA topic relevant to a junior engineer is something like choosing variable names. For senior engineers, it'd be about something more significant such as deciding how to design the architecture or choosing one database over another.RULE #3\n\n#### Choose actual conflicts, not potential conflicts.\n\nA conflict is a disagreement drawn out over time. If there wasn't much discussion about it or time didn't pass while it persisted, then it probably wasn't a conflict. If this is the case, it was more of a “potential conflict that got resolved quickly.” If it wasn't a conflict, then don't position it as one.\n\n## Example of a potential conflict that got resolved quickly\n\n*   “They said X. I said Y. And then they said, ‘Oh, you're right. Actually, Y is better.' And then we did Y.”\n\nVS\n\n## Example of an actual conflict\n\n*   “They said X. I said Y. And then time passed. They still said X and I still said Y. So, I did research on X and Y. More time passes. I showed this research to get buy-in from some Important People. Then I showed my research to the People Who Said X. More time passes. The People Who Said X weren't convinced until Z happened. Then the People Who Said X got on board and said Y.”\n\nRULE #4\n\n#### Focus on what happened and stick to the facts.\n\nDefine the conflict, describe how the conflict was resolved, share the steps you took to resolve it, and state the outcome.\n\n> EXAMPLE:\"One conflict I had with my manager was about integrating a third-party API. They thought this service would improve performance. My research showed it improved performance marginally but complicated maintenance significantly. After gaining support from the team lead, I walked my manager through the data flows. They weren't convinced; however, they were more open to the idea. At the urging of myself and the team lead, the manager took it to one of their stakeholders who agreed that the long-term maintenance costs were too high to justify using this service. This led to us not integrating the third-party service that had been proposed.\"\n\n### Share experiences where you took a big loss\n\nPart of the [definition of earn trust says](https://www.aboutamazon.com/about-us/leadership-principles) that Amazon wants leaders who are “vocally self-critical, even when doing so is awkward or embarrassing,” so don't be afraid of telling Amazon how you've struck out swinging for the fences. You're encouraged to highlight the benefit that getting this “win” would have brought to your team. And, to give you an idea of the big-scale losses they want to hear about, you can talk about failures that resulted in losing a contract, losing future business, or losing a lot of money.\n\n### Questions the candidate asks the interviewer are an opportunity to show signal\n\nGreat candidates demonstrate signal in places most candidates might overlook, such as the questions they ask the interviewer when wrapping up.\n\n> Question from the candidate:\"Let's say you have a user who used to use the Alexa services when they were a new user, but now they don't use the Alexa services anymore. How do you collect the data to understand what went wrong, so you can improve user experience? Most users are going to ignore surveys, so how do you learn about stuff like what features they didn't like?\"\n\nBy framing it around user experience, this question broadcasts customer obsession. It's crucial to take advantage of every opportunity to broadcast signal, so don't ignore the importance of asking questions in a strategic way.\n\n## How to practice for a Leadership Principles interview in six steps\n\nAn average candidate will go online, get a list of behavioral interview questions, immediately start typing answers to the questions, and maybe get some feedback from friends.  \n  \nThe primary error here is implementing a solution before understanding the problem. Another error here is the lack of a robust QA process between the initial answer you type out and the answers you say in an interview. What are the chances you got it right the first time? What are the odds that your original answer left a bunch of data unsaid? And what if the data you're leaving behind is better than what you wrote down in your first draft?  \n  \nAnother mistake is that friends often go easy on you and frequently lack the knowledge or skill to give you actionable feedback. When learning from friends, the best case scenario is you learn less than you should, and the worst case is you learn the wrong stuff entirely.\n\nThere are six steps you should follow to prepare for Amazon Leadership Principles interview so you can beat the game.![Six steps to prepare for an Amazon Leadership Principles interview](/_next/image?url=%2Fstatic%2Fimages%2FSixSteps.png&w=1920&q=75)\n\n### \n\n1\n\nExtract the raw data\n\nApproach the raw data extraction like a brain dumpA brain dump is “the act or an instance of comprehensively and uncritically expressing and recording one's thoughts and ideas (as on a particular topic)” ([Source](https://www.merriam-webster.com/dictionary/brain%20dump)). Don't worry yet about the quality of what you extract, and don't focus too much on how it all sounds. Your goal is just to get everything written/typed out.  \nPrepare for follow-up questions.For more than 40 years the [STAR framework](https://cdn-images.zety.com/pages/what_is_the_star_interview_method.jpg) has remained the de facto standard method for structuring answers to behavioral questions. STAR doesn't protect you from an ornery engineer drilling down for 15 minutes on some obscure detail about a project you did two years ago. So, how do you prepare for follow-up questions? Grill yourself until you've extracted enough data. You can either spend a reasonable amount of time grilling yourself before the interview, or you can spend an unreasonable amount of time getting grilled during the interview.\n\n> \"Interviewers may spend 10-15 minutes on a single point, asking multiple follow-up questions and going deep into the point.\"interviewing.io interviewer from Amazon\n\nSelf Reflection\n\nFor each project you've worked on in the past few years, ask yourself these questions:\n\nWhat business problem was this project supposed to solve?\n\nWhat were the greatest technical challenges? (Usually, the more interesting ones are the ones you didn't expect)\n\nWhat approach did you take?\n\nWhat are the drawbacks to the approach you chose?\n\nWhat alternative approaches did you consider?\n\nHow did you compare the approaches?\n\nWhat tradeoffs did you consider?\n\nHow did you profile them?\n\nHow did you compare scalability for each?\n\nWhat was your vision for how each technology would evolve over time?\n\nWhat were the functional challenges?\n\nDid you have to do something faster than usual?\n\nOr with less resources than usual? How new was the subject matter to you?\n\nHow many other teams or stakeholders did you work with on this?\n\nHow much pre-established process was there in place for your role?\n\nWhat were the interpersonal challenges?\n\nWhat did you learn?\n\nDiscover some gems.Grilling yourself will give you a ton of data. But most of that data won't be impressive to an outsider. Much of it might be muck. But that's OK! Within the muck, there will be some gems, pieces of well-crafted language. After you've uncovered these gems, search them for any signal of customer obsession. Gems don't need to have that signal. However, a gem with any of these signals is inherently a more valuable gem because it's tailor-made for Amazon.\n\nExample Gems\n\nFor each project you've worked on in the past few years, ask yourself these questions:\n\nI found a security vulnerability in our cloud infrastructure which saved the company 3 million dollars in annual customer support costs.\n\nThe main project I worked on for the last two years was a bot detection project to stop fraud. As a part of my research, I spoke with the 10+ teams (including some Staff-level engineers) who had attempted to solve this problem but failed. I noticed they all did the same thing - they made an assumption that hackers aren't always evolving. These other teams were implementing 1 idea every 6 months or 1 idea per year. My team (myself and a data scientist) was able to implement 5 ideas per week. So, in some sense, we were moving more than 125X faster than the other engineers who had previously worked on this problem. We ended up solving the problem, getting some patents, and saving the company a bunch of money.\n\nThis is something that I learned the first time I built my own user authentication from scratch. Any way you authenticate users, there are always going to be security risks.\n\nI made a software application that controls a very fancy refrigerator. I wrote 5-10k lines of code for this project. The most challenging part was linking up three different aspects (which were all over the stack) to talk to each other. Low-level hardware interfacing, which was all wrapped up. And then there's the back end logic that controls the data ingest and data logging and data processing. Lastly, there's the front end which is a graphical application with live plots and switches and dials and stuff.\n\nFind a bunch of metrics and impact.You don't need to be 100% certain about the numbers; that's unreasonable. When it comes to your work history, especially for companies you no longer work for, your best guess is good enough.\n\nMetrics and Impact\n\nIf you want to find metrics and impact for anything you've built, you can ask yourself questions such as:\n\nHow large was its dataset or how many rows of data were analyzed to make it?\n\nHow many devices/users did it launch to or will it launch to?\n\nHow many engineering hours did it save? How many non-engineering hours did it save? How often (how many times per year) will these hours be saved? What is the cost of those yearly hours?\n\nHow much money is processed by it?\n\nHow much more accurate or effective was it than a given benchmark?\n\nHow much was efficiency or productivity increased by it?\n\nWhat did users or colleagues say about it?\n\n### \n\n2\n\nFrame the data\n\nWhat is the process to turn your raw data into something polished for an interview?You have your raw data. Next, you have to figure out how you want to frame the data, then you apply the data to the frame you chose, then you see what story the data is telling, and then see if someone else can understand the story. To begin, let's observe a perfect answer that you can emulate. This will become your frame.\n\nExample of a perfect answer to an LP question (i.e., your frame)We listened to hundreds of interview responses to find this perfect LP answer. First, we are going to demonstrate why it is such an effective answer. Then we encourage you to listen to the answer in its entirety.\n\nA great answer goes in a perfect, full circle.The candidate's answer starts with a key statement of the problem and ends with a summary of how he solved the problem. When you craft stories that go in a perfect, full circle (from problem to solution), your impact is baked into the answer.\n\nSpeak in a way that both an expert and an idiot can understand.Albert Einstein said: “You don't really understand you examine the answer, notice how simple his word choice is. Every word in the sentence is necessary, yet there are no words you have to google to understand.\n\nFocus on individual contribution.Most of his answer focuses on the actions he took (i.e., his “individual contribution”). Because of this, he avoids getting bogged down by minutiae, such as technical jargon, details on how these teams and business units work, the specifics of the approach they took in this architecture, or explaining how this particular technology functions.\n\nHear the perfect LP answer for yourself (don't mind the sharks 😉 )\n\n### \n\n3\n\nIterate\n\nNow that you have your frame, you can build answers atop the frame to see how they fit. Doing this will help you find out what works and what doesn't.\n\nTalk through your answers.The best way to practice is with an experienced interviewer who has domain expertise. If that's not available to you, then you'll want to use our example questions, record some answers, and analyze your own responses. Overall, this isn't a bad choice, but it isn't as helpful as practicing with an expert because feedback from yourself is limited by blind spots.\n\nUse gems, metrics, and impact as much as possible.It's impossible to overdo it with these three skills. There's nowhere in an answer that they can't be used effectively. Get comfortable using them. Experiment. Find what works for you.\n\nClearly answer the question and demonstrate your passion for delighting customers.As we proved earlier, there's little to no value in guessing the underlying LP or attempting to aim your answer at one specific LP. Instead, practice answering each question clearly and broadcasting your obsession with making customers happy.\n\nMake 80% of your answer about individual contribution.Focus on making “I” statements (as in, “actions that I took”). This leaves 20% of your answer to cover “everything else.” Some examples of “everything else” are: a) “We” (or “actions we took”), b) “How stuff works in this company (or team or organization),” and c) “little things worth mentioning.”\n\n### \n\n4\n\nRefine the stuff that works\n\nNow that you have practiced giving answers with some framing, you should have a better idea of what works. At this point, you can refine the story your data is telling. This means (partially or fully) scripting out your answers. How much to script depends on your preferences; some people prefer room for improvisation, while others would rather know exactly what they're going to say.  \n  \nOnce you have a basic outline of the key points to hit, or the answer scripted out in full, you can measure what story your data is telling. To achieve this, consider how much signal for customer obsession is found in your answers.  \n  \nFinally, it's time to benchmark how effective you are at conveying your story to someone else.\n\n### \n\n5\n\nGo from good to great\n\nGet actionable feedback from actual Amazon interviewers.Admittedly, we're biased, and we think you should use the interviewers on [interviewing.io](https://interviewing.io) 🙃 Mock interviewing with experts will take you from good to great because it accurately simulates the environment of an interview. It's just like the real interview but without negative consequences; think of it as a proxy server for your job search. You get what you need (actionable feedback) from a reliable source (an Amazon interviewer) and there's no risk involved (you can't get rejected).\n\n[Schedule a mock interview](https://interviewing.io/signup)\n\n### \n\n6\n\nAdopt the Amazon mindset\n\nEmbrace the fire.In the spirit of competition, Amazon turns up the heat to see how you react to the flame. Expect direct challenges. When it happens, stay cool. Don't forget: it's not a standardized test; it's a game. And in order to beat the game, there's one thing that we want to make sure we're on the same page about…\n\n## \n\n## Amazon Leadership Principles interview question examples\n\nMost Amazon behavioral questions fall into one of 5 buckets. In this question bank we will define the 5 buckets and give you a few example questions in each bucket.\n\n## \n\nBucket #1: Technical problem solving\n\nIf you ignore the “spin” some of these questions have on them (complexity, simplicity, novelty, etc.), these questions are straightforward; this bucket is about how you solve technical problems.\n\nTell me about your project which was the toughest in terms of technical challenges.\n\nGive me an example of a complex problem you solved with a simple solution. What made the problem complex? How do you know your solution addressed the problem?\n\nGive me an example of a time you proposed a novel approach to a problem. What was the problem and why did it require a novel approach? Was your approach successful?\n\n## \n\nBucket #2: Learning (and failure)\n\nThese questions ask you about times you learned lessons. Sometimes lessons are learned through research you did or curiosities you followed. Sometimes lessons are learned from mistakes you made (you can define failure as “knowledge gained through first-hand experience.”)\n\nHow do you approach learning new technologies?\n\nGive me an example of a significant professional failure. What led you to making the wrong decision? What did you learn from this situation?\n\nWe all have things about ourselves we'd like to improve on at work. Give me an example of something that you've worked on to improve your overall work effectiveness. What resources did you identify to help you develop? What was the impact?\n\nTell me about a time when you were wrong.\n\n## \n\nBucket #3: Getting stuff (for the business) done\n\nThese questions are about your ability to achieve desired outcomes for the business.\n\nTell me about a time when you went above and beyond for a customer. Why did you do it? How did the customer respond? What was the outcome?\n\nTell me about a time when you took on something significant outside your area of responsibility. Why was it important? What was the outcome?\n\n​​Tell me about a time when you had to deliver something at a very tight timeline.\n\n## \n\nBucket #4: Interpersonal conflict\n\nThis is the most discussed bucket of Amazon questions. It's about conflicts with other people.\n\nTell me about a time when you had a disagreement with a colleague or manager.What was the situation and how did you resolve that?\n\nTell me about a time where you disagreed with a coworker or PM or manager because you believed the decision they wanted to make was wrong for the customer.\n\nTell me about a time when you strongly disagreed with your manager or peer on something you considered very important to the business.\n\n## \n\nBucket #5: Ambiguity\n\n“Ambiguity” questions are easy to identify because the question will present two opposing or conflicting ideas.\n\nGive me an example of when you had to make an important decision and had to decide between moving forward or gathering more information.What did you do? What was the outcome? What information is necessary for you to have before acting?\n\nGive me an example of a calculated risk that you have taken where speed was critical.What was the situation and how did you handle it ? What steps did you take to mitigate the risk?\n\nTell me a time you made a hard decision to sacrifice the short term gain for a longer term goal.\n\nAll credit for this video goes to the legend Bruce Lee, and also to AMC who shot the original footage.\n\n#### Credits\n\n###### Creator and Contributing Author\n\nKevin Landucci\n\n###### Core Consultants\n\nAline Lerner\n\nSam Jordan\n\nDivy Gandhi\n\n###### Editor\n\nMax Boyd\n\n###### Special thanks\n\nEvery one of our users who gave me feedback on the beta version, and all of the wonderful interviewers whom I'm not allowed to name 🙃\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)\n\ninterviewing.io\n\n[Interview Replays](https://interviewing.io/mocks)\n\n[System design mock interview](https://interviewing.io/mocks/google-system-design-distributed-databases)[Google mock interview](https://interviewing.io/mocks/google-java-order-statistic-of-an-unsorted-array)[Java mock interview](https://interviewing.io/mocks/linked-in-java-reverse-word-in-string)[Python mock interview](https://interviewing.io/mocks/airbnb-python-missing-item-list-difference)[Microsoft mock interview](https://interviewing.io/mocks/microsoft-go-vertex-distance-order-statistic)\n\n[Interview Questions by Language/Company](https://interviewing.io/learn#interview-process-and-questions-by-programming-language)\n\n[Java interview questions](https://interviewing.io/java-interview-questions)[Python interview questions](https://interviewing.io/python-interview-questions)[JavaScript interview questions](https://interviewing.io/javascript-interview-questions)[Amazon interview questions](https://interviewing.io/guides/hiring-process/amazon#solutions-to-common-amazon-questions)[Google interview questions](https://interviewing.io/guides/hiring-process/google#solutions-to-common-google-questions)[Meta interview questions](https://interviewing.io/guides/hiring-process/meta-facebook#solutions-to-common-facebook-questions)[Apple interview questions](https://interviewing.io/guides/hiring-process/apple#solutions-to-common-apple-questions)[Netflix interview questions](https://interviewing.io/guides/hiring-process/netflix#solutions-to-common-netflix-questions)[Microsoft interview questions](https://interviewing.io/guides/hiring-process/microsoft#solutions-to-common-microsoft-questions)\n\n[Popular Interview Questions](https://interviewing.io/questions)\n\n[Reverse string](https://interviewing.io/questions/reverse-string)[Longest substring without repeating characters](https://interviewing.io/questions/longest-substring-without-repeating-characters)[Longest common subsequence](https://interviewing.io/questions/longest-common-subsequence)[Container with most water](https://interviewing.io/questions/container-with-most-water)[Reverse linked list](https://interviewing.io/questions/reverse-linked-list)[K closest points to origin](https://interviewing.io/questions/k-closest-points-to-origin)[Kth smallest element](https://interviewing.io/questions/kth-smallest-element)[Reverse words in a string](https://interviewing.io/questions/reverse-words-in-a-string)\n\n[Guides](https://interviewing.io/learn#interview-guides)\n\n[Amazon Leadership Principles](https://interviewing.io/guides/amazon-leadership-principles)[System Design Interview Guide](https://interviewing.io/guides/system-design-interview)[FAANG Hiring Process Guide](https://interviewing.io/guides/hiring-process)\n\nCompany\n\n[For engineers](https://interviewing.io/)[For employers](https://interviewing.io/employers)[Blog](https://interviewing.io/blog)[Press](https://interviewing.io/employers#press)[FAQ](https://interviewing.io/faq)[Security](https://interviewing.io/.well-known/security.txt)[Log in](https://start.interviewing.io/login)\n\n[![interviewing.io](/static/images/icon--linkedin-grey.svg)](https://www.linkedin.com/company/interviewing-io)[![interviewing.io](/static/images/icon--twitter.svg)](https://twitter.com/interviewingio)[![interviewing.io](/static/images/icon--youtube.svg)](https://www.youtube.com/c/interviewingio)\n\n©2025 Interviewing.io Inc. Made with <3 in San Francisco.\n\n[Privacy Policy](https://interviewing.io/privacy)[Terms of Service](https://interviewing.io/terms)",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/amazon-leadership-principles",
      "author": "interviewing.io",
      "user_id": ""
    },
    {
      "title": "Interview Guide: A Senior Engineer's Guide to the System Design InterviewCandidates often get ove",
      "content": "We helped write the sequel to \"Cracking the Coding Interview\". [Read 9 chapters for free →](https://bctci.co/free-chapters)\n\n[\n\ninterviewing.io\n\n\n\n](/)\n\nOpen menu\n\nInterview resources\n\n*   [For employers](https://interviewing.io/employers)\n*   [Gift mock interviews](https://interviewing.io/gift-practice-interviews)\n*   [Blog](https://interviewing.io/blog)\n*   [FAQ](https://interviewing.io/faq)\n*   [Log in](https://start.interviewing.io/login)\n[Give it a try](https://interviewing.io/signup)\n\n# A Senior Engineer's Guide to the System Design Interview\n\n## How To Prepare For a System Design Interview\n\nPart 1 is a ~20 minute read\n\n#### Table of Contents\n\n[What this guide is and whom it's for](/guides/system-design-interview#what-this-guide-is-and-whom-it-s-for)\n\n[How we made this guide](/guides/system-design-interview#how-we-made-this-guide)\n\n[How to use this guide](/guides/system-design-interview#how-to-use-this-guide)\n\n#### Part 1: How to approach a system design interview\n\n[Introduction to System Design](/guides/system-design-interview#introduction-to-system-design)\n\n[The difference between engineering problems and design problems](/guides/system-design-interview#the-difference-between-engineering-problems-and-design-problems)\n\n[How approaching a system design interview is different than a coding interview](/guides/system-design-interview#how-approaching-a-system-design-interview-is-different-than-a-coding-interview)\n\n[What it’s like to walk into a system design interview](/guides/system-design-interview#what-it-s-like-to-walk-into-a-system-design-interview)\n\n[What your interviewer looks for, and what they don’t](/guides/system-design-interview#what-your-interviewer-looks-for-and-what-they-don-t)\n\n[Green Flags, Red Flags, and other signposts](/guides/system-design-interview#green-flags-red-flags-and-other-signposts)\n\n#### Part 2: 15 fundamental system design concepts\n\n[Part 2 Introduction](/guides/system-design-interview/part-two#part-2-introduction)\n\n[About these 15 fundamental concepts](/guides/system-design-interview/part-two#about-these-15-fundamental-concepts)\n\n[One note about the 12 technical topics](/guides/system-design-interview/part-two#one-note-about-the-12-technical-topics)\n\n[Three core concepts for system design interviews](/guides/system-design-interview/part-two#three-core-concepts-for-system-design-interviews)[a. There’s no right way to design a system](/guides/system-design-interview/part-two#a-there-s-no-right-way-to-design-a-system)[b. General rules of thumb](/guides/system-design-interview/part-two#b-general-rules-of-thumb)[c. Exactly what words to say in specific scenarios](/guides/system-design-interview/part-two#c-exactly-what-words-to-say-in-specific-scenarios)\n\n[12 fundamental (technical) system design concepts](/guides/system-design-interview/part-two#12-fundamental-technical-system-design-concepts)[a. APIs](/guides/system-design-interview/part-two#concepts-apis)[b. Databases (SQL vs NoSQL)](/guides/system-design-interview/part-two#concepts-databases)[c. Scaling](/guides/system-design-interview/part-two#concepts-scaling)[d. CAP Theorem](/guides/system-design-interview/part-two#concepts-cap)[e. Web authentication and basic security](/guides/system-design-interview/part-two#concepts-authentication)[f. Load balancers](/guides/system-design-interview/part-two#concepts-balancers)[g. Caching](/guides/system-design-interview/part-two#concepts-caching)[h. Message queues](/guides/system-design-interview/part-two#concepts-queues)[i. Indexing](/guides/system-design-interview/part-two#concepts-indexing)[j. Failover](/guides/system-design-interview/part-two#concepts-failovers)[k. Replication](/guides/system-design-interview/part-two#concepts-replication)[l. Consistent hashing](/guides/system-design-interview/part-two#concepts-hashing)[Part 2 Outro](/guides/system-design-interview/part-two#part-2-outro)\n\n#### Part 3: A 3-step framework to crush any system design interview\n\n[Part 3 Intro](/guides/system-design-interview/part-three#part-3-intro)\n\n[About this 3-step framework](/guides/system-design-interview/part-three#about-this-3-step-framework)[Fundamentals of this framework](/guides/system-design-interview/part-three#fundamentals-of-this-framework)[How to use this framework](/guides/system-design-interview/part-three#how-to-use-this-framework)[Limitations](/guides/system-design-interview/part-three#limitations)[Overview of the 3 steps](/guides/system-design-interview/part-three#overview-of-the-3-steps)\n\n[Step 1: Requirements](/guides/system-design-interview/part-three#step-1-requirements)[1.1 Functional Requirements](/guides/system-design-interview/part-three#1-1-functional-requirements)[1.2 Non-Functional Requirements](/guides/system-design-interview/part-three#1-2-non-functional-requirements)\n\n[Step 2: Data Types, API and Scale](/guides/system-design-interview/part-three#step-2-data-types-api-and-scale)[2.1 What data types does the system need to store?](/guides/system-design-interview/part-three#2-1-what-data-types-does-the-system-need-to-store)[2.2 What does the API look like?](/guides/system-design-interview/part-three#2-2-what-does-the-api-look-like)[2.3 What volume of requests do we need to support?](/guides/system-design-interview/part-three#2-3-what-volume-of-requests-do-we-need-to-support)\n\n[Step 3: Design](/guides/system-design-interview/part-three#step-3-design)[So what is “design”?](/guides/system-design-interview/part-three#so-what-is-design)[3.1 Data storage](/guides/system-design-interview/part-three#3-1-data-storage)[3.1.1 Relational vs. Non-Relational](/guides/system-design-interview/part-three#3-1-1-relational-vs-non-relational)[3.2 Microservices](/guides/system-design-interview/part-three#3-2-microservices)\n\n[End-to-end example of the process](/guides/system-design-interview/part-three#end-to-end-example-of-the-process)[Step 1: Requirements](/guides/system-design-interview/part-three#step-1-requirements)[Step 2: Data Types, API and Scale](/guides/system-design-interview/part-three#step-2-data-types-api-and-scale)[Step 3: Design](/guides/system-design-interview/part-three#step-3-design)\n\n[Part 3: Outro](/guides/system-design-interview/part-three#part-3-outro)\n\n#### Part 4: Watch us design simple systems from scratch, and learn how to get unstuck\n\n[About Part 4](/guides/system-design-interview/part-four#about-part-4)\n\n[Chapter One](/guides/system-design-interview/part-four#chapter-one)[For something large enough, let’s look at TikTok and simplify it greatly. Here’s one way to do it:](/guides/system-design-interview/part-four#for-something-large-enough-let-s-look-at-tik-tok-and-simplify-it-greatly-here-s-one-way-to-do-it)[Let’s now look into Pastebin. It’s probably the easiest one of all the above.](/guides/system-design-interview/part-four#let-s-now-look-into-pastebin-it-s-probably-the-easiest-one-of-all-the-above)\n\n[Chapter Two](/guides/system-design-interview/part-four#chapter-two)[Warm-up Problem One: Deduplication](/guides/system-design-interview/part-four#warm-up-problem-one-deduplication)[Warm-up Problem Two: The Enumeration Problem](/guides/system-design-interview/part-four#warm-up-problem-two-the-enumeration-problem)[Real problem: Unique ID Generation, aka the Key Generation Service (KGS)](/guides/system-design-interview/part-four#real-problem-unique-id-generation-aka-the-key-generation-service-kgs)\n\n[Chapter Three](/guides/system-design-interview/part-four#chapter-three)[Design AOL Instant Messenger](/guides/system-design-interview/part-four#design-aol-instant-messenger)[Solution Design](/guides/system-design-interview/part-four#solution-design)[Short Polling, Long Polling, and WebSockets—are we there yet?](/guides/system-design-interview/part-four#short-polling-long-polling-and-web-sockets-are-we-there-yet)[Conclusion](/guides/system-design-interview/part-four#conclusion)\n\n[Chapter Four](/guides/system-design-interview/part-four#chapter-four)[The fourth and final problem we will cover in Part 4 is what is commonly referred to as “Design Ticketmaster.”](/guides/system-design-interview/part-four#the-fourth-and-final-problem-we-will-cover-in-part-4-is-what-is-commonly-referred-to-as-design-ticketmaster)[Solution](/guides/system-design-interview/part-four#solution)[What could possibly go wrong in the Ticketmaster system?](/guides/system-design-interview/part-four#what-could-possibly-go-wrong-in-the-ticketmaster-system)[SQL Schema Design](/guides/system-design-interview/part-four#sql-schema-design)[Exactly once seats to orders](/guides/system-design-interview/part-four#exactly-once-seats-to-orders)[Timestamps instead of cleanup jobs](/guides/system-design-interview/part-four#timestamps-instead-of-cleanup-jobs)[Keeping the payments subsystem at bay](/guides/system-design-interview/part-four#keeping-the-payments-subsystem-at-bay)[CAP, anyone?](/guides/system-design-interview/part-four#cap-anyone)[The Real-Time Part](/guides/system-design-interview/part-four#the-real-time-part)[Bonus](/guides/system-design-interview/part-four#bonus)\n\n[Part 4: Outro](/guides/system-design-interview/part-four#part-4-outro)[What’s next for the team that made this guide](/guides/system-design-interview/part-four#what-s-next-for-the-team-that-made-this-guide)[interviewing.io-approved resources](/guides/system-design-interview/part-four#interviewing-io-approved-resources)\n\n1.  [Learning Center](/learn)\n    \n2.  [Guides](/learn#interview-guides)\n    \n3.  System Design\n    \n\n### Who we are\n\ninterviewing.io is your trusted advisor for every stage of your job search. In our lifetime, we've hosted close to 100k mock interviews, conducted primarily by senior engineers from FAANG. We have the recordings from these interviews, as well as feedback and outcomes, which lets us perform cool and useful analysis, like the kind in this guide. We’ve also helped thousands of engineers get jobs and negotiate their salaries, and along the way we’ve built a community of people dedicated to helping each other get better.\n\n[Join our community](/signup)\n\n![YouTube: Watch \"How interviewing.io Helps Engineers Land Jobs\"](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwho-we-are-video.1fd791bd.png&w=1080&q=75)\n\nYouTube: Watch \"How interviewing.io Helps Engineers Land Jobs\"\n\n## What this guide is and whom it's for\n\nCandidates often get overwhelmed with system design. We don’t blame them. There are literally hundreds of topics you can study when preparing for an interview. But does that mean that you should drop everything and go study all of them? Absolutely not. It’s vital to master the basic principles first.\n\nMastering the fundamentals will go a long way in system design. When you’re new to a subject, there can be diminishing returns by studying too much over a short period of time, and this can actually hurt you in a real interview. Early in your preparation, it can help to know more and have more options, but this can also cause you to feel overwhelmed by the sheer number of potential answers, possibly leading you toward overcomplicated solutions.\n\nOur experience has shown us that 80% percent of system design interviews involve only 20% of the concepts. This guide will teach you those key concepts in depth to increase your odds of excelling during an interview.\n\nOur primary audience is backend-leaning engineers who are interviewing for mid-level to senior-level roles. Whether you’re new to system design interviews or you’re a seasoned system design interviewer looking to refresh or hone your skills, this guide is for you.\n\n## How we made this guide\n\nWe began by listening to 30+ hours of system design interviews and system design lessons. We then performed data analysis to identify 50+ of our highest rated interviewers.\n\nCollectively, the interviewers who worked on this guide have conducted thousands of system design interviews in the wild, and we stress-tested this material by asking engineers who were new to system design to take our ideas for a spin.\n\nOur unique data set (the collective knowledge of our interviewers and our database of recorded interviews) makes us well equipped to tell you exactly what to expect in an interview. If we discuss something in this guide, it’s likely to appear in 80% of mid-level / senior interviews.\n\nRead on to gain insight from the people on the other side of the table, who will give you unique access to the only thing separating you from the high-TC job you seek: the minds of your interviewers.\n\n## How to use this guide\n\n### This guide is structured into 4 parts.\n\n1.  How to approach a system design interview\n2.  Key topics to understand\n3.  A 3-step framework to crush any system design interview\n4.  Watch us design popular systems from scratch, and learn how to get unstuck\n\nNew to system design interviews? We recommend reading Parts 1-4 in order. The first two sections will introduce you to the high-level theories that will help you ease into the practical exercises and advanced strategies found in Parts 3 and 4.\n\nIf you have completed several system design interviews, feel free to begin with Part 4, which includes advanced techniques and practical tips to help you pass your interview. Afterward, you can quickly review Parts 1-3 by focusing on topics that seem helpful to you.\n\nWe created this guide because we want to provide you with a shortcut to interview success. At the same time, we don’t want you to take any shortcuts in your preparation. So we’ve got a bit of a paradox, because on one hand, we want to teach you the cheat codes that will help you beat the game, but on the other hand, we want you to put in the sweat equity required to learn the intricacies of system design yourself. The truth is that there are no royal roads, and a good interviewer will be able to recognize if you haven’t put in the work. By reading this guide and really thinking about it, you’ll learn enough to be prepared for your interview, and along the way we will provide you with a collection of tricks that will make everything easier. So here’s your shortcut, but don’t take any shortcuts.\n\n### Editor’s note\n\nWe use the terms “machine,” “server,” and “node” interchangeably throughout the guide.\n\n### Table of Contents\n\nThe “Table of Contents,” located on the left side of the screen, is designed to help you find and navigate the stuff you need. Use it. That way you can revisit conceptual sections to get a refresher and fast forward to sections you’re most interested in.\n\nTo give you a heads up, it will take about 6 hours (3.5 reading and 2.5 watching videos) to consume all 4 parts of this guide. We promise those hours will be incredibly well spent!\n\n### Rule of thumb\n\nIf you have an upcoming system design interview and you're vastly unprepared, **the best thing you can do is reschedule your interview.** The bigger the company, the less they care about rescheduling.\n\nExceptions to this Rule of thumb: you have an extenuating circumstance that requires you to get a job fast (e.g., visa issues).\n\n### Legend\n\nRule of thumb\n\nQuestion\n\nAnecdote\n\nOutlaw idea \\*\n\nRemember\n\nWarning\n\nTip\n\nHow to Get Yourself Unstuck\n\n\\* Note: an “outlaw idea” is a divergent or controversial idea\n\n## Introduction to System Design\n\nYou may be reading this guide because you recently failed a system design interview. Or you watched a YouTube video that made system design seem like an overwhelming topic you’ll never fully grasp. Or perhaps you have years of experience working in the field, yet you struggle to demonstrate your technical prowess in the brief span of a system design interview.\n\n### Do not panic!\n\n![Do not panic laptop](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdo-not-panic.0023b194.png&w=3840&q=75)\n\n**Professional experience with distributed systems isn’t needed to pass system design interviews.** And even if you do have that experience, keep in mind that many talented distributed systems engineers still struggle with the system design interview format. How you perform in an interview is not a measure of your worth as a software engineer—it is a measure of your ability to do system design interviews. The two are related but not equal; being a good programmer has a surprisingly small role in passing interviews.\n\n### Anecdote\n\nOne of our experts was asked: “As an experienced engineer without any scalable systems experience, how can I go into something like a FAANG system design interview when I have never designed those systems before?” Here’s the expert’s reply:\n\n\"I worked at Facebook for five and a half years. I learned more about system design from reading the internal interviewing wiki than I ever got from working at Facebook. They've got all kinds of distributed systems knowledge there, and it’s concentrated in a handful of infrastructure teams who build really great libraries and really great backend systems. That means that the rest of us never have to think about distributed systems. We get to say, 'I'm gonna make a new data type, and if I dump a billion records in it tomorrow, it doesn't matter. The systems folks have my back.' I worked at Facebook for a really long time, but I learned almost nothing about designing systems from experience.\"\n\n### Remember\n\nYou can pass system design interviews even if you’ve never designed distributed systems before. If you have copied files between machines with drag-and-drop, you are halfway there. If you implemented clients or servers or have opened network connections, you’ve got this. This guide will teach you the most important 20% of information that will appear 80% of the time in system design interviews. By the end of this guide you won’t be an expert, but you’ll be well on your way to being a better engineer and a much better interview candidate.\n\n## The difference between engineering problems and design problems\n\n**In this excerpt taken from Design Your Life**, written by two Stanford professors and engineers, you’ll get a better understanding of how different problems require different approaches. We bolded to emphasize the parts that are most important to note.\n\n“There’s a difference between design problems and engineering problems... **Engineering is a good approach to solving a problem when you can get a great deal of data and you’re sure there is one best solution.** Bill \\[one of the authors\\] worked on the problem of engineering the hinges on Apple’s first laptops, and the solution he and his team came up with made those laptops some of the most reliable on the market. The solution required many prototypes and lots and lots of testing, similar to the design process, but the goal of creating hinges that would last five years (or opening and closing ten thousand times) was fixed, and his team tested many different mechanical solutions until they met their goal. **Once this goal was met, the solution could be reproduced millions of times. It was a good engineering problem.**\n\n“Compare this with the problem of designing the first laptop that had a ‘built in mouse’. Because Apple’s computers relied on the mouse to do almost everything, building a laptop that required you to be wired up to a regular mouse was unacceptable. **This was a design problem. There was no precedent to design toward, there was no fixed or predetermined outcome;** there were plenty of ideas floating around the lab, and a number of different designs were tested, but nothing was working. Then along came an engineer named Jon Krakower. Jon had been tinkering around with miniaturized trackballs, and had the crazy idea to push the keyboard to the back of the unit, leaving just enough room to squeeze in this tiny pointing device. This turned out to be the big breakthrough everyone had been looking for, and has been part of the signature look of Apple laptops ever since.\n\n“**When you have a desired outcome (a truly portable laptop computer) but no clear solution in sight, that’s when you brainstorm, try crazy stuff, improvise, and keep ‘building your way forward’ until you come up with something that works. You know it when you see it.** A great design comes together in a way that can’t be solved with equations and spreadsheets and data analysis. It has a look and feel all of its own - a beautiful aesthetic that speaks to you.”\n\n![Designing your life book image](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdesigning-your-life.5b832608.png&w=3840&q=75)\n\nThis is one reason engineers new to system design can bomb their first couple of system design interviews spectacularly: They approach a design problem as if it’s an engineering problem. There is not a single “best” solution to a system design problem. There are no predetermined outcomes. The less code you write in a system design interview, the better.\n\nTo succeed in a system design interview, you want to collaborate with your interviewer, try crazy stuff, and try more crazy stuff until the design “feels right.”\n\n## How approaching a system design interview is different than a coding interview\n\n**The difference between coding and system design is the difference between retrieving and creating.**\n\nInstead of finding (or “retrieving”) a solution, you are creating a solution. In this way, coding is akin to a science, while system design is more like an art.\n\n![Depiction of analytical left brain and creative right brain](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbrain-sides.ae49f6ed.png&w=3840&q=75)\n\nHere’s another way to think about it. You aren’t solving a problem—you’re creating a map to help someone else find the solution. Instead of coloring inside some lines, you’ll need to draw the lines for someone else to color in. In a system design interview, there are no correct answers—though there are certainly incorrect ones—so there is nothing to solve. Instead, you’ll ask questions, make stuff, and explain how and why the stuff you made was reasonable.\n\n##### Don’t think like a coder. Think like a Tech Lead.\n\nDuring the interview, you’ll spend an hour playing the role of a Tech Lead, so just pretend that the interviewer is a junior engineer who will be implementing your design. Juniors will have lots of questions, and since you’re the Tech Lead, you want to welcome these questions.\n\n### Anecdote\n\n“Pretend it’s 1999, so a lot of the stuff we have access to today simply doesn’t exist. You and a group of your schoolmates are in your garage, hoping to make something. You're the most senior one there. You will design it and your friends will code it up, and the thing is: the Minimum Viable Product has to be completed by tomorrow. So, there’s no time to prep and no need to worry about the intricacies of system architecture that you don’t know. Just answer this: How would you design this system so your friends could code it up today, right now? It doesn’t have to be pretty. It doesn’t have to be complicated. It doesn’t have to impress anyone. It just has to get done.”\n\n##### What you do is important, but how you communicate is even more important.\n\nThe value of communication in coding interviews is controversial ([source](https://interviewing.io/blog/does-communication-matter-in-technical-interviewing-we-looked-at-100k-interviews-to-find-out)). But without communication in a system design interview, nothing happens. By necessity, it’s more conversational in nature than a coding interview and will have more back and forth between interviewer and candidate.\n\nWith that said, sometimes you’ll have an interviewer who is cold or not very collaborative. Dealing with these interviewers requires practice. The more senior you become, the more important it is to learn how to adjust your communication style to match your audience. We recommend completing mock interviews with a variety of interviewers to help you become a seasoned, fearless veteran of system design interviews.\n\n##### There are no optimal solutions in system design interviews.\n\nThere’s no “right” way to design a system. If two experts designed the same system, you would see two different designs, beautiful and aesthetic in their own way and both as “correct” as the other (and with the accompanying justifications to support them).\n\n### Tip\n\nIn [part 2](/guides/system-design-interview/part-two), two experts will show you how they would each design the same system, providing you with a practical lesson on this topic.\n\n##### Lean towards your strengths.\n\n### Anecdote\n\n“If you want to be a great interview candidate you’ve gotta know… It’s your responsibility to leave breadcrumbs for the interviewer to go where you want them to go. That way you have them walk you down the road where you are at your best. And then the Jedi mind trick is to get them to think it was their idea to get you there.”\n\nWhat if your measurement of success in an interview isn’t what you say, but instead it’s what you get the interviewer to say? Imagine you say something that engages the interviewer’s curiosity so much that they have no choice but to follow up with a “tell me more about that.” If the areas you get them to dig into the deepest, are things you’re good at: congratulations you are doing the Jedi mind trick.\n\nA candidate doing a system design interview will usually experience confusion. The interview format is so open-ended, you cannot know about everything they'll ask you. However, there will be opportunities to strut your stuff. There will be moments when they ask you about something you know very well, and when this happens put your shoulders back and flex your muscles on this topic.\n\n## What it’s like to walk into a system design interview\n\nWhen beginning an interview, try to imagine what the interviewer is looking for. What are their goals for the session? How can you help them achieve those goals in a way that persuades them that you’ll be a strong hire?\n\n**Put simply, the interviewer's goal is to find enough data to hire you.** Given the limited time available to them, an interviewer has to try to get enough positive signal about your ability so they can justify giving you a “hire” rating. In one hour you have to show your interviewer that you understand the fundamentals of a system (end to end). You also should be able to name and explain (at least at a high level) each part of the system, describe the tradeoffs you make, and find a solution.\n\n### Remember\n\nThe best way to accomplish this is to imagine that you’re explaining a design doc to a group of more junior engineers. They will ask you questions about your decisions and want to know what you’re trying to solve. Anticipating these questions and your responses will set you up for success in the interview.\n\n![Woman helping man code](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpair-programming.ad187620.png&w=3840&q=75)\n\nWant to know exactly what a FAANG System Design interviewer looks for? Get detailed feedback on your system design skills from our professional interviewers.\n\n[See available times](/signup)\n\n![](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcta.47351a0d.png&w=1200&q=75)\n\n## What your interviewer looks for, and what they don't\n\nWith this basic model in mind, let's consider the main elements that system design interviewers look for, and the elements that don’t matter.\n\n### What your interviewer wants to see\n\n1.  a broad, base-level understanding of system design fundamentals.\n2.  back-and-forth about problem constraints and parameters.\n3.  well-reasoned, qualified decisions based on engineering trade-offs.\n4.  the unique direction your experience and decisions take them.\n5.  a holistic view of a system and its users.\n\n### What your interviewer is not looking for\n\n1.  deep expertise in the given problem domain.\n2.  assumptions about the prompt.\n3.  specific answers with ironclad certainty.\n4.  a predefined path from the beginning to end of the problem.\n5.  strictly technical considerations.\n\n##### You do not need to display deep expertise in the given problem domain. Interviewers want to see that you have a broad, base-level understanding of system design fundamentals.\n\nYour interviewer will expect you to have knowledge of a wide range of basic topics, but they won't expect you to be an expert in any of them. For instance, you should understand the difference between SQL and NoSQL databases, their broad performance characteristics, and the types of applications each might be useful for (which we’ll teach you later in this guide). But you would not need to know how the internals of either type of database work at any kind of detailed level.\n\nIn spite of this, you still might be asked to design those internals! Keep in mind, though, that your answer doesn't need to be optimal or reflect real-world implementations. For example, if an interviewer asks you to design a database/SQL query engine, they're not trying to discern if you're familiar with the academic literature on query engines or discover how much time you've spent working on database internals.\n\nInstead, they want to see how you would approach the problem based on what you do know, starting from first principles and collaborating with them. Your answer will probably not be anywhere near optimal, and that's OK! The interviewer will focus on the process, not the result.\n\n##### Interviewers want to engage you in a back-and-forth conversation about problem constraints and parameters, so avoid making assumptions about the prompt.\n\nInitial prompts to system design problems tend to be intentionally light on detail. Many candidates make a mistake by extrapolating details from the initial prompt and crafting a solution based on those assumptions.\n\nFor example, imagine that the interviewer instructs you to design a \"photo sharing service\" with some minimally defined capabilities. This may cause some candidates to imagine that they're rebuilding Instagram and start designing around the assumption that all images will be relatively small, not examined closely, and that extensive compression to save storage and bandwidth is acceptable.\n\nBut the interviewer didn’t tell you to rebuild Instagram, so you’ll need to keep in mind that there are many different types of photo sharing services. The interviewer may have had in mind something like Imgur or Photobucket, sites that cater more to basic image hosting for the web. Or they could be thinking about something like Flickr or 500px, services built for photographers to show off their work in high resolution.\n\nSo how do you figure out what type of service the interviewer wants you to build? Ask them! A basic prompt leaves room for you to start a conversation with your interviewer about the system you're designing—what type of users does it serve, what type of traffic can it expect, what limits will it have? Demonstrating that you can think critically about the parameters of your service is the first step in any system design interview.\n\n##### Interviewers are not looking for specific answers with ironclad certainty. They want to see well-reasoned, qualified decisions based on engineering trade-offs.\n\nBe very careful any time you find yourself responding immediately to a prompt in a system design interview. Even aspects of your design that seem insignificant need at least cursory consideration. Let’s use IDs as an example.\n\nA candidate will often start a discussion of a data model with a statement like, \"I'll use auto incrementing IDs,\" or \"I'll use GUID here\" as kind of a default approach to assigning IDs to data. In many applications, however, the type of ID you assign to your data has practical consequences.\n\nIs this ID going to be exposed to users? If so, how long does it need to be to avoid collisions? If we auto-increment it, are we worried about the visibility that will give third parties into our traffic patterns or the possibilities of users guessing the IDs to each others' data? If it's intended to be shared, is it convenient to type? If you print it on a business card or a flier, does it contain characters that you could confuse for each other (e.g., “1” and “I”, “0” and “O”)?\n\nYou don't need to hold an inquiry for every minor detail, but always be sure to give some justification for the decisions you make and let your interviewer know how your decisions would change in different circumstances. System design problems don't have a single definitive answer, so interviewers just want to see that you can justify your answers.\n\n##### Interviewers are not looking for a predefined path from the beginning to end of the problem. They want to see the unique direction your experience and decisions take them.\n\nCoding problems usually have an expected path. Typically you'll begin with an obvious but inefficient solution, and then the interviewer will prompt you for a series of improvements. Those improvements lead you to increasingly efficient solutions until you finally arrive at the optimal implementation.\n\n![Choose your own adventure books](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fchoose-your-own-adventure.3a08d61b.png&w=3840&q=75)\n\nSystem design problems, on the other hand, resemble a Choose Your Own Adventure book rather than a linear novel. A complex system contains a multitude of sub-components, each one of which could serve as a design problem on its own. After you've sketched the overall layout of your system, an interviewer may decide to keep your focus on the big picture or dive into a deeper examination of one particular component.\n\nThe path your interview takes will be steered by your interviewer, but they're likely to take cues from the sub-problems in which you display interest or aptitude. In some cases they may explicitly ask you which part of the problem you'd prefer to focus on.\n\nEven if you're not choosing directly, you can still influence an interview's direction. As you talk your way through a solution, it’s OK to specifically note the parts that you have experience in and explain when you're making educated guesses. Your interviewer won't expect you to know everything, but giving them a better idea of what you do know will help them steer the interview in ways that reveal your strengths and problem-solving ability.\n\n##### Interviewers seek a holistic view of a system and its users.\n\nWhen faced with a choice in a design interview, it's easy to focus on the technical details, but remember that computer systems serve human users, so you’ll want to anchor your technical decisions to the user experience they enable.\n\nSuppose, for instance, that the image sharing service you're designing will require users to log in before uploading an image. In technical terms, you might want to avoid login to keep the database schema simpler, or you could introduce login to gather better metrics. An anonymous experience may be best for a public image-hosting site intended for quick turnaround and low interaction, while a logged-in experience offers the possibility of community features like commenting and sharing, personalized metrics, and the ability to restrict an upload to authorized viewers. You may want to take either approach or even both, allowing a limited anonymous experience with extra features for logged-in users.\n\nThe important thing is to discuss the possible approaches and their consequences for the user experience with your interviewer before making a decision. You can never go wrong by making the end user the driving force in your design.\n\n![Red flag and green flag](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fred-flag-green-flag.69295f3f.png&w=3840&q=75)\n\n## Green Flags, Red Flags, and other signposts\n\nThink of red and green flags as signposts you can use to orient yourself in the interview. Green flags indicate that things are going well, that you're engaging with the interviewer and making a positive impression. Red flags warn you that you may be going astray and should try to get the interview back on track.\n\n### Red Flag #1: You believe that to pass a system design interview, you should just “play the game, keep talking, and make sure nobody explodes.”\n\nFollowing this quote’s advice has steered many interviewees in the wrong direction. There is no game, and talking for the sake of talking is one way to hang yourself with the rope the interviewer gives you. Also, if the goal is to not explode, well, you’re wasting your and your interviewer’s time.\n\n### Green Flag #1: You communicate honestly about what you know and what you don’t.\n\nAs we mentioned earlier, this guide will teach you the basic information that you’ll be asked about in 80% of system design interviews. Although these are great odds, you still may encounter a scenario that’s beyond your level of understanding. If this happens to you, don’t worry! Just engage in an honest dialogue with your interviewer, explaining when you lack certain knowledge or have gaps in your understanding. When you do have a sense of how to proceed, but you’re uncertain, you should communicate from first principles. Later in this guide, we will explain how to overcome that uncertainty and still score points with your interviewer.\n\n### Red Flag #2: You find yourself pushing against interviewer feedback.\n\nKeep in mind that your interviewers use the same problems over and over again, and they frequently see candidates make the same mistakes. If they try to divert you from a course of action, it's likely because they've seen others flounder when using the same approach. You may be the one candidate in a hundred who finds a unique and better solution—we've had this happen before!—but carefully consider the odds before proceeding with a solution against the interviewer's advice.\n\nWith that said, there is an art to pushing back against your interviewer when the situation calls for it, and later in this guide we’ll teach you how and when to employ this strategy .\n\n### Green Flag #2: The interview feels like a collaboration between you and the interviewer.\n\nWhen the interviewer offers feedback, you integrate it into your design. You ask probing questions and receive useful answers about the system you're designing, its users, and its traffic. **Try to establish a tone as if you were working through a problem with a coworker rather than proving yourself to an interviewer.** In the real world, when you’re assigned a project, you’ll have to ask a variety of people several questions to ensure that you fully understand the problem before making decisions. That’s what interviewers want to see.\n\n### Red Flag #3: You skip over questions and ignore interviewer prompts, trying to move the interview ahead without addressing their concerns.\n\nIt's OK to not know things—no one will have every answer—but it's better to admit that to your interviewer than to avoid the questions altogether. Your interviewer may be able to offer you a hint or help you reason about alternatives if they know you're struggling, but if you skip right ahead you'll miss the opportunity to provide them with any positive signal from that portion.\n\n### Green Flag #3: Your role determines who should drive the focus and pace of the interview.\n\nIf you’re looking for a mid-level position or below, your interviewer should determine the direction and speed of the interview. Given an initial overview of your design, they may ask you for clarification on some aspects of it. They may ask you to produce a more detailed design for one or more components. And they may also change the requirements and ask how you could adapt your solution to accommodate this new view of the world. Wherever they take the interview, follow along and focus on the areas they direct you to.\n\nIf you’re applying for a senior role (or above), it’s a good sign if you direct more of the interview. In junior system design interviews, the interviewer expects to drive the interview, but as you reach senior levels the expectation shifts to the interviewee.\n\n### Anecdote from a seasoned interviewer\n\n​​Being overly confident and talking too much might count against a mid-level candidate. Some interviewers (especially off-script ones) love giving candidates more rope to hang themselves with, and then they ask specific questions that focus on what the candidate struggles with.\n\nIf your goal is to maximize a mid-level offer, not improve your \"average passing rate\" (i.e., if you are comfortable sacrificing some senior-plus chances to increase your mid-level chances), then you might be better off consciously \"giving control away\" to your interviewer.\n\nSimply put, at the above-senior level an awkward pause will be held against you—that’s basically guaranteed. But at mid-level, most of your attempts to fill in an awkward pause may hurt you more than keeping silent.\n\nAnother way to think of it: when you are not leading the conversation, you signal that you’re not really far above mid-level. (But if you are comfortable at mid-level, this is not a downside!)\n\nThe saying, ‘Better to remain silent and be thought a fool than to speak out and remove all doubt’ can be true for mid-level interviews but not for seniors or above-senior.”\n\n### Red Flag #4: You leave long stretches (several minutes) of silence multiple times throughout the interview.\n\nIf you're struggling to provide an answer, give yourself a little bit of time to come up with something. If you're truly stuck, however, you should ask your interviewer for help. They can't tell that you're at an impasse unless you tell them, and you may waste valuable interview time while they debate whether it's been long enough to interrupt you.\n\n### Green Flag #4: You take time to collect your thoughts and refine solutions before offering them up out loud/on the board.\n\nAn interview doesn't need to be a continuous stream of consciousness, and it never hurts to sanity check your ideas before verbalizing them.\n\n### Tip\n\nIn Part 4 of this guide, we’ll teach you how to get unstuck and exactly what to say when you’re stuck.\n\n![Several road signs](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Froad-signs.c32a8e36.png&w=3840&q=75)\n\n### A few more signposts\n\n##### A common failure point occurs when candidates don’t make decisions\n\nOften, candidates will say things like: “we could use this type of DB, or this other, or that other, and these are some pros and cons…” and then they move on to another component. It’s a good practice to talk about benefits and tradeoffs, but then you have to make a decision. In the real world you have to make decisions—the same thing applies to the interview. If the interviewer challenges you with some questions, it’s totally fine to change your mind and alter the component (if you think there are better choices).\n\n### Don’t say\n\n![Thumbs down icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-down.bfb29c8c.png&w=64&q=75)\n\nWe could use this type of DB, or this other, or that other, and these are some pros and cons…\n\n### Do say\n\n![Thumbs up icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-up.c52eadb9.png&w=64&q=75)\n\n\"We could use this type of DB, or this other, or that other, and these are some pros and cons… **And based on all these tradeoffs, I’ll use THAT type of DB.**\"\n\n##### Interviewers want to identify “impostors”: people who just learned a few words and try to pass the interview.\n\n**Don’t say things because you think you’re supposed to say them.** This often occurs when candidates name specific brands of technologies (e.g., “Kafka” or “Cassandra”). Not being familiar with specific databases or other components is fine. Be smart and don’t say brand names just for the sake of saying them.\n\n### Don’t say\n\n![Thumbs down icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-down.bfb29c8c.png&w=64&q=75)\n\nI’m going to use Cassandra...” unless you are VERY familiar with that, because the next question will be: “Why Cassandra and not some\\_other\\_db?\n\n### Do say\n\n![Thumbs up icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-up.c52eadb9.png&w=64&q=75)\n\nI’m going to use a NoSQL db because of \\[insert brief rationale\\].\n\n### Don’t say\n\n![Thumbs down icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-down.bfb29c8c.png&w=64&q=75)\n\nI will use Kafka…” unless you’re prepared to explain how Kafka works. Don’t say “I will use Kafka” unless you are prepared to talk about other types of queues, because they may ask you: “Oh, Kafka, interesting choice. Why that instead of \\[some other queue\\]?\n\n### Do say\n\n![Thumbs up icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-up.c52eadb9.png&w=64&q=75)\n\nI will use a queue because of \\[insert brief rationale\\].\n\n### Remember\n\nSay the generic name of the component, not the brand name unless you are very familiar with it. Don’t say Kafka. Instead, say “a queue.\n\nYou finished Part 1! We hope you gained a basic understanding of the system design interview and learned some tips and tricks you can use to excel in it. As you continue reading Parts 2-4, these “glimmers” of understanding will become more and more the default system of your interviewing skills.\n\nIn Part 2 we’ll teach you the 15 fundamental system design concepts. You’ll also get to watch our long form video of two system design experts designing the same system. They’re tasked with designing interviewing.io, which in this challenge is actually three systems in one: “Design google docs, a remote compiler, and a recording service… in 30 minutes or less.”\n\n[Part 2: 15 fundamental system...\n\n](/guides/system-design-interview/part-two)\n\n#### Credits\n\n###### Creator and author\n\nKevin Landucci\n\n###### Contributing authors\n\nAyush Bagla\n\nMartin Copes\n\nDima Korolev\n\nFrank (Haolun) Li\n\nMichael Mroczka\n\n###### Core consultants\n\nBruno Albuquerque\n\nAdam Bhula\n\nGrace Shea\n\n###### Technical reviewer\n\nGithire (Brian) Wahome\n\n###### Additional consultants\n\nBret Funk\n\nKyle Pacia\n\nJosh Thompson\n\n###### Editor\n\nAline Lerner\n\n###### Special thanks\n\nAll of the wonderful interviewers whom we’re not allowed to name 🙃\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)\n\ninterviewing.io\n\n[Interview Replays](https://interviewing.io/mocks)\n\n[System design mock interview](https://interviewing.io/mocks/google-system-design-distributed-databases)[Google mock interview](https://interviewing.io/mocks/google-java-order-statistic-of-an-unsorted-array)[Java mock interview](https://interviewing.io/mocks/linked-in-java-reverse-word-in-string)[Python mock interview](https://interviewing.io/mocks/airbnb-python-missing-item-list-difference)[Microsoft mock interview](https://interviewing.io/mocks/microsoft-go-vertex-distance-order-statistic)\n\n[Interview Questions by Language/Company](https://interviewing.io/learn#interview-process-and-questions-by-programming-language)\n\n[Java interview questions](https://interviewing.io/java-interview-questions)[Python interview questions](https://interviewing.io/python-interview-questions)[JavaScript interview questions](https://interviewing.io/javascript-interview-questions)[Amazon interview questions](https://interviewing.io/guides/hiring-process/amazon#solutions-to-common-amazon-questions)[Google interview questions](https://interviewing.io/guides/hiring-process/google#solutions-to-common-google-questions)[Meta interview questions](https://interviewing.io/guides/hiring-process/meta-facebook#solutions-to-common-facebook-questions)[Apple interview questions](https://interviewing.io/guides/hiring-process/apple#solutions-to-common-apple-questions)[Netflix interview questions](https://interviewing.io/guides/hiring-process/netflix#solutions-to-common-netflix-questions)[Microsoft interview questions](https://interviewing.io/guides/hiring-process/microsoft#solutions-to-common-microsoft-questions)\n\n[Popular Interview Questions](https://interviewing.io/questions)\n\n[Reverse string](https://interviewing.io/questions/reverse-string)[Longest substring without repeating characters](https://interviewing.io/questions/longest-substring-without-repeating-characters)[Longest common subsequence](https://interviewing.io/questions/longest-common-subsequence)[Container with most water](https://interviewing.io/questions/container-with-most-water)[Reverse linked list](https://interviewing.io/questions/reverse-linked-list)[K closest points to origin](https://interviewing.io/questions/k-closest-points-to-origin)[Kth smallest element](https://interviewing.io/questions/kth-smallest-element)[Reverse words in a string](https://interviewing.io/questions/reverse-words-in-a-string)\n\n[Guides](https://interviewing.io/learn#interview-guides)\n\n[Amazon Leadership Principles](https://interviewing.io/guides/amazon-leadership-principles)[System Design Interview Guide](https://interviewing.io/guides/system-design-interview)[FAANG Hiring Process Guide](https://interviewing.io/guides/hiring-process)\n\nCompany\n\n[For engineers](https://interviewing.io/)[For employers](https://interviewing.io/employers)[Blog](https://interviewing.io/blog)[Press](https://interviewing.io/employers#press)[FAQ](https://interviewing.io/faq)[Security](https://interviewing.io/.well-known/security.txt)[Log in](https://start.interviewing.io/login)\n\n[![interviewing.io](/static/images/icon--linkedin-grey.svg)](https://www.linkedin.com/company/interviewing-io)[![interviewing.io](/static/images/icon--twitter.svg)](https://twitter.com/interviewingio)[![interviewing.io](/static/images/icon--youtube.svg)](https://www.youtube.com/c/interviewingio)\n\n©2025 Interviewing.io Inc. Made with <3 in San Francisco.\n\n[Privacy Policy](https://interviewing.io/privacy)[Terms of Service](https://interviewing.io/terms)",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/system-design-interview",
      "author": "interviewing.io",
      "user_id": ""
    },
    {
      "title": "Interview Guide: A Senior Engineer’s Guide to FAANG InterviewsWe’ve talked to dozens of current &",
      "content": "We helped write the sequel to \"Cracking the Coding Interview\". [Read 9 chapters for free →](https://bctci.co/free-chapters)\n\n[\n\ninterviewing.io\n\n\n\n](/)\n\nOpen menu\n\nInterview resources\n\n*   [For employers](https://interviewing.io/employers)\n*   [Gift mock interviews](https://interviewing.io/gift-practice-interviews)\n*   [Blog](https://interviewing.io/blog)\n*   [FAQ](https://interviewing.io/faq)\n*   [Log in](https://start.interviewing.io/login)\n[Give it a try](https://interviewing.io/signup)\n\n# Ultimate Guide to FAANG Interviews for Senior Engineers\n\n## Part 1: Similarities, Differences, and Chaos\n\n~20 minute read\n\n#### Table of Contents\n\n[Introduction to FAANG interviews](/guides/hiring-process#introduction-to-faang-interviews)\n\n[About this guide](/guides/hiring-process#about-this-guide)\n\n[3 tips for FAANG interview success](/guides/hiring-process#3-tips-for-faang-interview-success)\n\n#### Part 1: Differences between the FAANGs\n\n[The Chaos Score](/guides/hiring-process#the-chaos-score)[How we calculated the Chaos Score for each company](/guides/hiring-process#how-we-calculated-the-chaos-score-for-each-company)[Deep dive into the FAANG Chaos Scores](/guides/hiring-process#deep-dive-into-the-faang-chaos-scores)\n\n[Which FAANGs let you interview with different teams simultaneously?](/guides/hiring-process#which-faangs-let-you-interview-with-different-teams-simultaneously)\n\n#### Part 2: A guide to each FAANG company’s interview process\n\n[Meta](/guides/hiring-process/meta-facebook#meta)\n\n[Amazon](/guides/hiring-process/amazon#amazon)\n\n[Apple](/guides/hiring-process/apple#apple)\n\n[Netflix](/guides/hiring-process/netflix#netflix)\n\n[Google](/guides/hiring-process/google#google)\n\n[Microsoft](/guides/hiring-process/microsoft#microsoft)\n\n[Conclusion](/guides/hiring-process/conclusion#conclusion)\n\n1.  [Learning Center](/learn)\n    \n2.  [Guides](/learn#interview-guides)\n    \n3.  FAANG Interviews\n    \n\nThere are lots of guides out there to FAANG interview processes. **This one is the most thorough and the most detailed because it’s the only one made _by interviewers for candidates_ – we spent hundreds of hours talking to dozens of current and former FAANG interviewers about their processes**. Throughout this guide, you’ll see a bunch of direct quotes from these interviewers, where they describe the idiosyncrasies of each company’s process and bar in their own words. We’re fortunate to have them in the interviewing.io community, and we’re lucky that we can collaborate with them on this type of content. As you can imagine, they all requested to stay anonymous, but we want to thank them here, first and foremost.\n\n## Introduction to FAANG interviews\n\n![Introduction to FAANG interviews](/_next/image?url=%2Fstatic%2Fimages%2Fguides%2Fhiring-process%2Fdont-panic.png&w=3840&q=75)\n\nFAANG interviews are a gauntlet, but you can pass them even if you doubt yourself – interviewing is easier once you learn a company’s operating metaphor. George Lakoff (neuroscience and artificial Intelligence researcher) says that every human organization has a metaphor they operate as. If you ask an employee at a FAANG company about their metaphor, you’ll probably receive a blank stare in return. But if you look at the interviewing data of that same FAANG company, the metaphors jump out of the data set like bread out of a toaster.\n\nThis guide will walk you through all the FAANGs’ metaphors and the unwritten codes of those metaphors: what they reward, what they punish, and what they’re blind to. To show them you’re obviously a part of their tribe, model their metaphors and unwritten codes.\n\nMetaphors aside, this guide will also walk you through the unglamorous logistics of every FAANG’s interview process so that you know how many steps there are, what those steps entail, and what kinds of questions they ask. Our goal is to have you walk in and be completely unfazed by the proceedings because you’re expecting them.\n\nOf course, even with all the insider info in the world, if you’re not prepared for technical interviews, you will fail, so we’d be remiss if we didn’t share some useful insights about practice to help you on your journey.\n\n## About this guide\n\nThere are 3 steps to getting a strong offer at FAANG.\n\n*   Step 1: Get Interview.\n*   Step 2: Do Interview.\n*   Step 3: Negotiate.\n\nSteps 1 and 3 are out of scope for this post, which is solely focused on Step 2.\n\nMoreover, this guide is written for experienced, back-end leaning engineers – interview processes are usually different for juniors, but we won’t be getting into those differences. Finally, we won’t be getting into the differences in process for front-end engineers, SREs, etc. That said, if you’re targeting those roles, you’ll still get value out of this guide.\n\nIn Part 1 of this guide, we’ll highlight key similarities and differences between the FAANG companies, namely:\n\n*   Meta\n*   Apple\n*   Amazon\n*   Netflix\n*   Google\n*   Microsoft (they’re not officially FAANG, but we’re including them anyway – from now on, when we say “FAANG”, we mean Microsoft as well)\n\nIn Part 2, we’ll go through each company one by one and tell you how each of their processes work and how to prepare for each one.\n\nIf you’re planning on interviewing with multiple FAANGS, we recommend reading Part 1 first. If you'd prefer to skip straight to a company’s individual guide then just click on it in the table of contents to the left! Individual guides include more detailed information on company-specific coding interviews, behavioral interviews, and anecdotes from actual interview experiences.\n\nAll of these big tech companies share grueling interview processes, strong initial compensation packages, and above average benefits. They compete with each other for the same engineers. If tech has a food chain, they’re at the top. Most other tech companies copy or are influenced by what FAANG does.\n\nThere are also a number of myths about FAANG interview processes. Two big ones are that Amazon has the lowest bar, and Google has the highest bar. That’s not true; we have the data. The reality is that all of their bars are different. It’s not a linear comparison. It’s a multidimensional comparison. Because of that, it’s impossible to say something like, “The entire process at Google is harder than the entire process at Amazon.” They’re simply different processes.\n\n#### Anecdote from a Facebook Interviewer\n\n“My friend interviewed at Google and Facebook, and he passed both loops. At Google, he was offered L6. At Facebook, he was offered L4. Speaking about luck: this is the same person with the same experience. And the level of difference– at two of the most trusted names in tech–was two levels of seniority.\n\nAnd one common idea in big tech is that Google’s process is easier than Facebook’s. But you can see here: it really depends. After all, this person accepted the L4 role at Facebook because the compensation package was bigger than the role at Google for L6.”\n\nLong story short: it’s complicated. That’s exactly why we wrote this guide: to demystify the differences, to decouple the 6-headed monster, and to demonstrate how to attack each head, one at a time.\n\n## 3 tips for FAANG interview success\n\nThis is the ultimate insider’s guide to tech interviews at FAANG. However, even with all the insider info in the world, if you’re not prepared for technical interviews, you will fail, so we’d be remiss if we didn’t share some useful insights about practice to help you on your journey. Yes, we know we’re a practice platform, and, look, you don’t have to practice with us. But you should practice! Here’s why.\n\n### 1\\. Do five practice interviews\n\nThree different startups with robust data sets on software engineering interviews found eerily similar data points about what happens after you do five technical interviews. I worked at all three companies and saw this data myself.\n\n*   In a previous article about [how to know when you're ready to interview at FAANG](https://interviewing.io/blog/how-know-ready-interview-faang) we shared that completing 5 technical interviews (mock interviews or real) doubles your chances of passing a subsequent technical interview.\n*   Triplebyte found that the chances of getting _at least 1 offer_ increases with each onsite you do, up until 5 onsites. For each onsite completed after the 5th, your chances of getting an offer level off at 80-85%.\n*   Pathrise found that most of their engineers failed 4-5 onsites before they got an offer.\n\nMind you, these datasets were quite different: Triplebyte skewed towards folks with nontraditional backgrounds, interviewing.io inclined towards senior backend engineers, and Pathrise was mainly junior engineers. Despite that, the number five emerged across these data sets, and it’s clear that something happens after you complete five technical interviews. We can’t explain what yet. But the data is screaming in all caps: there is a there _there_. One more anecdotal point: these five interviews should ideally mimic the real thing as much as possible. For instance, if you want a FAANG job, but your five interviews are with startups that don’t ask algorithmic questions, you won’t get as much value. The more your practice can simulate the real game, the better.\n\n### 2\\. If you’re unprepared, it’s OK to reschedule\n\nIf you’re unprepared for a FAANG interview, ask to reschedule. **Not rescheduling is the number one mistake we see our users make!** Getting an interview tomorrow (as opposed to 1-3 months from tomorrow) is, in most cases, no different to the company… but very different to you – if you fail, you might get frozen out for months. In the rare cases where rescheduling could hurt your chances because it’s a specific role for a specific team, your recruiter will tell you that. Either way, there’s no harm in asking.\n\n### 3\\. A note about recruiter calls\n\nRecruiter calls don’t differ much from FAANG company to FAANG company, so we decided to put everything about what to expect in a recruiter call in one place. If a recruiter call ever meaningfully deviates from this format, we’ll mention it. Otherwise, expect that it doesn’t.\n\nA recruiter call is the first step of almost every process. In this call, a recruiter will ask you about your past experience, your salary expectations, and why you’re interested in that particular company. They will also ask you about your timeline (how soon you expect to accept an offer), how far along you are with other companies, whether you have outstanding offers, and so on.\n\nIn this call, it’s important to be able to succinctly talk about your past few positions, your major contributions at those positions (what did you do individually versus what did your team do) and their impact on the business. Remember that most recruiters don’t have a technical background and they’re not software developers, so it’s important to be able to describe your technical contributions in clear layman’s terms.\n\nIt’s also really important, at this stage, not to reveal your salary expectations, your salary history, or where you are in the process with other companies. We wrote a detailed [post about salary negotiation](https://interviewing.io/blog/negotiate-salary-recruiter) that lays out exactly what to say when recruiters pressure you to name the first number. Just don’t do it – when you give out information this early in the process, you’re painting future you into a corner.\n\n# Part 1. Differences between the FAANGs\n\n## The Chaos Score\n\nThis section will give you a feel for how these companies’ processes differ. For now, don’t worry about how that translates into interview prep – we’ll cover that later when we describe how to prepare for each company.\n\nTake a look at the chart below. In it, we rank the FAANGs on their “Chaos Score”. The more points a company has, the more chaotic they are.\n\nIn this context, we define “chaos” as the level of uncertainty and unpredictability that candidates can expect from the interview process and its outcomes. If a company consistently follows the same process, asks the same questions, and thoroughly trains their interviewers, they are not chaotic. If their process is completely non-standard, non-deterministic and subjective, they are chaotic.\n\n| Company Name | Chaos Score |\n| --- | --- |\n| Apple | 20 |\n| Netflix | 20 |\n| Microsoft | 18 |\n| Amazon | 12 |\n| Google | 10 |\n| Meta | 3 |\n\nAs you can see, Apple and Netflix win the award for the most chaotic interview processes in FAANG. Microsoft gets 2nd place. Amazon gets 3rd, Google 4th, and Facebook 5th.\n\nChaos can be pain or pleasure depending on your tolerance for uncertainty. Chaos can also either impose a terrible detriment or prove a huge advantage in interviews specifically. For instance, candidates who have spent a long time grinding on LeetCode might prefer less chaotic companies. More chaotic companies can work for candidates for a few reasons: a) niche skill sets can be an easier match for niche interview processes, b) practical interviews are more likely, and c) the interview process shows them how the team they’d be joining actually operates.\n\n### How we calculated the Chaos Score for each company\n\nTo calculate each company’s Chaos Score, we picked four categories and graded each company on a 0 to 5 point scale in each category, where 5 means most chaotic and 0 means least.\n\n1.  The “north star” of their decision-making process (do they care more about “What”, “Why”, or “How”?)\n2.  If they have the same interviews company-wide or if the interview changes depending on the team with which you’re interviewing\n3.  How much they train their interviewers\n4.  How much they standardize their interview questions\n\nWe added up the points for each company, with a maximum possible Chaos Score of 20.\n\n### Deep dive into the FAANG Chaos Scores\n\n|  | North star | Team dependent process? | Level of training for interviewers? | Level of standardization? |\n| --- | --- | --- | --- | --- |\n| Apple | Why (5) | Yes (5) | None (5) | None (5) |\n| Netflix | Why (5) | Yes (5) | None (5) | None (5) |\n| Microsoft | How (3) | Yes (5) | None (5) | None (5) |\n| Amazon | What (1) | Yes (5) | High (2) | Low (4) |\n| Google | How (3) | No (0) | Medium (3) | Low (4) |\n| Facebook | What (1) | No (0) | Highest (1) | Highest (1) |The more points a company has for each category, the more chaotic they are.\n\n#### The north star: “What”, “Why”, and “How” companies\n\nBy “North star”, we mean what a given company values most. As such, we grouped companies into 3 buckets: companies who primarily care about \"Why\", \"How\", and \"What\".\n\n“Why” is the most chaotic because judging motivations is the most subjective approach. “How” is the second most chaotic because judging thought processes is the second most subjective. “What” is the least chaotic because judging end results is the least subjective method.\n\n“Why” companies can’t agree on what a good “why” looks like because it’s a “gut feel / friend test”. Whom you consider to be a friend and who gives you a good gut feeling isn’t quantifiable. It’s completely subjective. “Why” companies are the most prone to bias. If you speak their language and model the behaviors they encourage, you’ll seem like a friend and give them a good gut feel. If you don’t, then you won’t.\n\nIf chaos is hell, then “Why” companies are raising hell for candidates and themselves.\n\n“How” companies mainly care about your thought process: _Okay, you didn’t get to the optimal solution, but what was the journey like_? Google and Microsoft repeat this mantra again and again – they want to know how you think. You might get asked a really hard or specific question, but they don’t necessarily require an optimal answer to pass. They put far more weight on your ability to demonstrate a solid thought process.\n\n“What” companies mainly care about your results, such as: _Did you get to the optimal solution_? Facebook and Amazon want you to get there, and fast. “What” is the most straightforward for candidates: simply get results as quickly as possible.\n\n#### Team-dependent process\n\nA Google or Facebook interview doesn’t change depending on the team you’re interviewing for. Both companies have one big, centralized interview process that’s completely divorced from which team you might end up on. If you do well in the team-agnostic process, there will be a team matching component after the onsite. You will NOT, however, be interviewing with your future coworkers.\n\n(Note: Google is rumored to be changing to a team-dependent process, but we’ll leave that where it is for now.)\n\nAt Microsoft, Netflix, Apple, and Amazon, the process is team-dependent. You’ll not only be interviewing with the people that you’ll be working with, but there’s more chaos. Each team defines how they do things: the types of questions asked, the types of interview rounds, and even how they make hiring decisions.\n\nTeam-dependent processes are more challenging in the sense that _you're more likely to get blind-sided_; because each team has a different process, candidates are more likely to prep for X and get (a significantly different) Y.\n\nYet, team-independent processes are more challenging _because of the machinery_. Your interviewers are so far removed from you. That detachment affects how they treat, judge, and talk about you.\n\n**Think of it like this: At Netflix, Apple, Amazon, and Microsoft you’re interviewing with humans. At Google and Facebook, you’re interviewing with a machine.**\n\n#### Interviewer training\n\nFacebook is the least chaotic company in this category because they have the most in-depth interviewer training in FAANG. Their process is rigorous and selective. Though most would-be interviewers pass within 6 months, some people who try never pass the bar to become an interviewer. Facebook is the only FAANG where this is true.\n\nFacebook and Amazon put interviewer candidates through roughly the same things, but Facebook is more rigorous. For example, both will have similar modules interviewers go through in training. A module at Amazon is more likely to be a box to check: if you do it, you pass. At Facebook, you don’t pass simply for doing it: you pass by meeting a predetermined bar. Also, Facebook modules are more likely to have a rubric.\n\nGoogle used to have a more in-depth interviewer training process than what they have now. For whatever reason, they began to skimp on their interviewer training roughly sometime in the 2010s. Now, Googlers can get a bit of training, but usually not as much as folks at Facebook or Amazon.\n\nNetflix, Microsoft, and Apple do not train their interviewers; certain teams may be exceptions but there’s no company-wide required interview training. The day you start, you can start interviewing. That makes them the most chaotic in this category.\n\n**What this means for candidates is that the less training they put their interviewers through, the more likely you’ll have a bad interviewer. As the old saying goes: “Prepare for the worst, pray for the best.”**\n\n#### Interview question standardization\n\nCompanies that standardize their interview questions give interviewers less free reign; groups with no standardization have more free reign. At all companies, there will be interviewers who go rogue and deviate from the norm. Yet, each company has a norm.\n\nFacebook wins again for being the least chaotic/most predictable. In behavioral rounds, interviewers at Facebook can ask whatever behavioral questions they want. However, in technical rounds, they can only ask pre-approved coding questions. They can also modify pre-approved coding challenges. That’s it.\n\nGoogle is tied for the second least chaotic here; their interviewers have free reign in technical rounds. They have a large technical question bank, yet interviewers routinely make up their own ambiguous one-of-a-kind questions. In behavioral rounds, they can only ask or modify pre-approved questions.\n\nAmazon is tied for second least chaotic, but for a different reason. Technically, there’s no standardization for any round (technical or behavioral). They do, however, tend to repeat questions from their internal question bank (which is not required for interviewers to use.)\n\nMicrosoft, Apple, and Netflix are the most chaotic companies. Each team decides what to ask. Questions tend to be customized to the hiring manager’s preferences, a senior individual contributor’s diligence, what this team works on day-to-day, or the specific domain this team is in.\n\n## Which FAANGs let you interview with different teams simultaneously?\n\nWhether you get one shot or unlimited shots to land an offer changes how you prepare. Here’s the breakdown of which companies let you interview with multiple teams concurrently.\n\n| Company Name | Can interview with different teams concurrently? |\n| --- | --- |\n| Apple | Yes |\n| Netflix | Yes |\n| Microsoft | Yes |\n| Amazon | Yes |\n| Google | No |\n| Meta | No |\n\nIf you can interview with multiple teams concurrently, then they don’t have a cool down period. So, after you fail, you don’t need to wait at all to reinterview. Two of the biggest players only give you one shot to win, and at the remaining four your chances are unlimited.\n\n**Because their interview process is centralized, Google and Facebook are the only ones well-organized enough to not let candidates “double dip”.**\n\n#### Tip to get unstuck\n\nIf you really want a job at Netflix, Apple, Amazon, or Microsoft: stack the odds of landing your dream job in your favor and interview with multiple teams. There’s no cool-down period, so if you get rejected from Team A, you can interview with Team B tomorrow.\n\nIn Part 2, we’ll give you a deeper feel for each company, and we’ll tell you what to do about it. Each company has its own section, and each section is organized into five subsections:\n\n1.  Interview process (including what to expect in the recruiter call and the phone screen)\n2.  What to expect in your interviews\n3.  How they make hiring decisions\n4.  Interview preparation resources\n\n[Meta\n\n](/guides/hiring-process/meta-facebook)\n\n#### Credits\n\n###### Creator and author\n\nKevin Landucci\n\n###### Editor\n\nAline Lerner\n\n###### Special thanks\n\nAll of the wonderful interviewers whom we’re not allowed to name 🙃\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)\n\ninterviewing.io\n\n[Interview Replays](https://interviewing.io/mocks)\n\n[System design mock interview](https://interviewing.io/mocks/google-system-design-distributed-databases)[Google mock interview](https://interviewing.io/mocks/google-java-order-statistic-of-an-unsorted-array)[Java mock interview](https://interviewing.io/mocks/linked-in-java-reverse-word-in-string)[Python mock interview](https://interviewing.io/mocks/airbnb-python-missing-item-list-difference)[Microsoft mock interview](https://interviewing.io/mocks/microsoft-go-vertex-distance-order-statistic)\n\n[Interview Questions by Language/Company](https://interviewing.io/learn#interview-process-and-questions-by-programming-language)\n\n[Java interview questions](https://interviewing.io/java-interview-questions)[Python interview questions](https://interviewing.io/python-interview-questions)[JavaScript interview questions](https://interviewing.io/javascript-interview-questions)[Amazon interview questions](https://interviewing.io/guides/hiring-process/amazon#solutions-to-common-amazon-questions)[Google interview questions](https://interviewing.io/guides/hiring-process/google#solutions-to-common-google-questions)[Meta interview questions](https://interviewing.io/guides/hiring-process/meta-facebook#solutions-to-common-facebook-questions)[Apple interview questions](https://interviewing.io/guides/hiring-process/apple#solutions-to-common-apple-questions)[Netflix interview questions](https://interviewing.io/guides/hiring-process/netflix#solutions-to-common-netflix-questions)[Microsoft interview questions](https://interviewing.io/guides/hiring-process/microsoft#solutions-to-common-microsoft-questions)\n\n[Popular Interview Questions](https://interviewing.io/questions)\n\n[Reverse string](https://interviewing.io/questions/reverse-string)[Longest substring without repeating characters](https://interviewing.io/questions/longest-substring-without-repeating-characters)[Longest common subsequence](https://interviewing.io/questions/longest-common-subsequence)[Container with most water](https://interviewing.io/questions/container-with-most-water)[Reverse linked list](https://interviewing.io/questions/reverse-linked-list)[K closest points to origin](https://interviewing.io/questions/k-closest-points-to-origin)[Kth smallest element](https://interviewing.io/questions/kth-smallest-element)[Reverse words in a string](https://interviewing.io/questions/reverse-words-in-a-string)\n\n[Guides](https://interviewing.io/learn#interview-guides)\n\n[Amazon Leadership Principles](https://interviewing.io/guides/amazon-leadership-principles)[System Design Interview Guide](https://interviewing.io/guides/system-design-interview)[FAANG Hiring Process Guide](https://interviewing.io/guides/hiring-process)\n\nCompany\n\n[For engineers](https://interviewing.io/)[For employers](https://interviewing.io/employers)[Blog](https://interviewing.io/blog)[Press](https://interviewing.io/employers#press)[FAQ](https://interviewing.io/faq)[Security](https://interviewing.io/.well-known/security.txt)[Log in](https://start.interviewing.io/login)\n\n[![interviewing.io](/static/images/icon--linkedin-grey.svg)](https://www.linkedin.com/company/interviewing-io)[![interviewing.io](/static/images/icon--twitter.svg)](https://twitter.com/interviewingio)[![interviewing.io](/static/images/icon--youtube.svg)](https://www.youtube.com/c/interviewingio)\n\n©2025 Interviewing.io Inc. Made with <3 in San Francisco.\n\n[Privacy Policy](https://interviewing.io/privacy)[Terms of Service](https://interviewing.io/terms)",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process",
      "author": "interviewing.io",
      "user_id": ""
    }
  ]
}